{
  "version": 3,
  "sources": ["../../clsx/dist/clsx.mjs", "../../react-data-grid/src/utils/colSpanUtils.ts", "../../react-data-grid/src/utils/domUtils.ts", "../../react-data-grid/src/utils/eventUtils.ts", "../../react-data-grid/src/utils/keyboardUtils.ts", "../../react-data-grid/src/utils/renderMeasuringCells.tsx", "../../react-data-grid/src/utils/selectedCellUtils.ts", "../../react-data-grid/src/style/cell.ts", "../../react-data-grid/src/utils/styleUtils.ts", "../../react-data-grid/src/utils/index.ts", "../../react-data-grid/src/cellRenderers/renderCheckbox.tsx", "../../react-data-grid/src/cellRenderers/renderToggleGroup.tsx", "../../react-data-grid/src/cellRenderers/renderValue.tsx", "../../react-data-grid/src/DataGridDefaultRenderersContext.ts", "../../react-data-grid/src/cellRenderers/SelectCellFormatter.tsx", "../../react-data-grid/src/hooks/useRowSelection.ts", "../../react-data-grid/src/Columns.tsx", "../../react-data-grid/src/renderHeaderCell.tsx", "../../react-data-grid/src/hooks/useCalculatedColumns.ts", "../../react-data-grid/src/hooks/useColumnWidths.ts", "../../react-data-grid/src/hooks/useGridDimensions.ts", "../../react-data-grid/src/hooks/useLatestFunc.ts", "../../react-data-grid/src/hooks/useRovingTabIndex.ts", "../../react-data-grid/src/hooks/useViewportColumns.ts", "../../react-data-grid/src/hooks/useViewportRows.ts", "../../react-data-grid/src/Cell.tsx", "../../react-data-grid/src/DragHandle.tsx", "../../react-data-grid/src/EditCell.tsx", "../../react-data-grid/src/GroupedColumnHeaderCell.tsx", "../../react-data-grid/src/HeaderCell.tsx", "../../react-data-grid/src/style/row.ts", "../../react-data-grid/src/HeaderRow.tsx", "../../react-data-grid/src/GroupedColumnHeaderRow.tsx", "../../react-data-grid/src/Row.tsx", "../../react-data-grid/src/ScrollToCell.tsx", "../../react-data-grid/src/sortStatus.tsx", "../../react-data-grid/src/style/core.ts", "../../react-data-grid/src/SummaryCell.tsx", "../../react-data-grid/src/SummaryRow.tsx", "../../react-data-grid/src/DataGrid.tsx", "../../react-data-grid/src/GroupCell.tsx", "../../react-data-grid/src/GroupRow.tsx", "../../react-data-grid/src/TreeDataGrid.tsx", "../../react-data-grid/src/editors/textEditor.tsx"],
  "sourcesContent": ["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;", "import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n", "import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n", "import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n", "import type { Direction, Maybe } from '../types';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\n// event.key may differ by keyboard input language, so we use event.keyCode instead\n// event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\nconst vKey = 86;\n\nexport function isDefaultCellInput(\n  event: React.KeyboardEvent<HTMLDivElement>,\n  isUserHandlingPaste: boolean\n): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  if (isCtrlKeyHeldDown(event) && (event.keyCode !== vKey || isUserHandlingPaste)) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n\nexport function getLeftRightKey(direction: Maybe<Direction>) {\n  const isRtl = direction === 'rtl';\n\n  return {\n    leftKey: isRtl ? 'ArrowRight' : 'ArrowLeft',\n    rightKey: isRtl ? 'ArrowLeft' : 'ArrowRight'\n  } as const;\n}\n", "import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n", "import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n", "import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://issues.chromium.org/issues/40840864\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    align-content: center;\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n", "import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number): CSSProperties {\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n", "import type { CalculatedColumn, CalculatedColumnOrColumnGroup, Maybe } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: Maybe<(row: NoInfer<R>) => K>\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkbox = css`\n  @layer rdg.CheckboxInput {\n    display: block;\n    margin: auto;\n    inline-size: 20px;\n    block-size: 20px;\n\n    &:focus-visible {\n      outline: 2px solid var(--rdg-checkbox-focus-color);\n      outline-offset: -3px;\n    }\n\n    &:enabled {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\n\nexport function renderCheckbox({ onChange, indeterminate, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <input\n      ref={(el) => {\n        if (el) {\n          el.indeterminate = indeterminate === true;\n        }\n      }}\n      type=\"checkbox\"\n      className={checkboxClassname}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n", "import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n", "import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n", "import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersContext';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby' | 'indeterminate' | 'onChange'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  indeterminate,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    indeterminate,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n", "import { createContext, useContext } from 'react';\n\nimport type { SelectHeaderRowEvent, SelectRowEvent } from '../types';\n\nexport interface RowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isRowSelectionDisabled: boolean;\n}\n\nexport const RowSelectionContext = createContext<RowSelectionContextValue | undefined>(undefined);\n\nexport const RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport function useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within renderCell');\n  }\n\n  return {\n    isRowSelectionDisabled: rowSelectionContext.isRowSelectionDisabled,\n    isRowSelected: rowSelectionContext.isRowSelected,\n    onRowSelectionChange: rowSelectionChangeContext\n  };\n}\n\nexport interface HeaderRowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isIndeterminate: boolean;\n}\n\nexport const HeaderRowSelectionContext = createContext<HeaderRowSelectionContextValue | undefined>(\n  undefined\n);\n\nexport const HeaderRowSelectionChangeContext = createContext<\n  ((selectRowEvent: SelectHeaderRowEvent) => void) | undefined\n>(undefined);\n\nexport function useHeaderRowSelection() {\n  const headerRowSelectionContext = useContext(HeaderRowSelectionContext);\n  const headerRowSelectionChangeContext = useContext(HeaderRowSelectionChangeContext);\n\n  if (headerRowSelectionContext === undefined || headerRowSelectionChangeContext === undefined) {\n    throw new Error('useHeaderRowSelection must be used within renderHeaderCell');\n  }\n\n  return {\n    isIndeterminate: headerRowSelectionContext.isIndeterminate,\n    isRowSelected: headerRowSelectionContext.isRowSelected,\n    onRowSelectionChange: headerRowSelectionChangeContext\n  };\n}\n", "import { useHeaderRowSelection, useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'rdg-select-column';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const { isIndeterminate, isRowSelected, onRowSelectionChange } = useHeaderRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      indeterminate={isIndeterminate}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ checked: isIndeterminate ? false : checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const { isRowSelectionDisabled, isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      disabled={isRowSelectionDisabled}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const { isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n", "import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n", "import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\nimport renderHeaderCell from '../renderHeaderCell';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultRenderCell = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultRenderHeaderCell = defaultColumnOptions?.renderHeaderCell ?? renderHeaderCell;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultRenderCell,\n          renderHeaderCell: rawColumn.renderHeaderCell ?? defaultRenderHeaderCell\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultRenderCell,\n    defaultRenderHeaderCell,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n", "import { useLayoutEffect, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, ResizedWidth, StateSetter } from '../types';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement | null>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const [columnToAutoResize, setColumnToAutoResize] = useState<{\n    readonly key: string;\n    readonly width: ResizedWidth;\n  } | null>(null);\n  const [prevGridWidth, setPreviousGridWidth] = useState(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidth;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (key === columnToAutoResize?.key) {\n      newTemplateColumns[idx] =\n        columnToAutoResize.width === 'max-content'\n          ? columnToAutoResize.width\n          : `${columnToAutoResize.width}px`;\n      columnsToMeasure.push(key);\n    } else if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(updateMeasuredWidths);\n\n  function updateMeasuredWidths() {\n    setPreviousGridWidth(gridWidth);\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n\n    if (columnToAutoResize !== null) {\n      const resizingKey = columnToAutoResize.key;\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const oldWidth = resizedColumnWidths.get(resizingKey);\n        const newWidth = measureColumnWidth(gridRef, resizingKey);\n        if (newWidth !== undefined && oldWidth !== newWidth) {\n          const newResizedColumnWidths = new Map(resizedColumnWidths);\n          newResizedColumnWidths.set(resizingKey, newWidth);\n          return newResizedColumnWidths;\n        }\n        return resizedColumnWidths;\n      });\n      setColumnToAutoResize(null);\n    }\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: ResizedWidth) {\n    const { key: resizingKey } = column;\n\n    flushSync(() => {\n      if (columnsCanFlex) {\n        // remeasure all the columns that can flex and are not resized by the user\n        setMeasuredColumnWidths((measuredColumnWidths) => {\n          const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n          for (const { key, width } of viewportColumns) {\n            if (resizingKey !== key && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n              newMeasuredColumnWidths.delete(key);\n            }\n          }\n          return newMeasuredColumnWidths;\n        });\n      }\n\n      setColumnToAutoResize({\n        key: resizingKey,\n        width: nextWidth\n      });\n    });\n\n    if (onColumnResize) {\n      const previousWidth = resizedColumnWidths.get(resizingKey);\n      const newWidth =\n        typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n      if (newWidth !== undefined && newWidth !== previousWidth) {\n        onColumnResize(column, newWidth);\n      }\n    }\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement | null>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n", "import { useLayoutEffect, useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n", "import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n", "import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n", "import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        // eslint-disable-next-line react-compiler/react-compiler\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n", "import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isDraggedOver,\n  row,\n  rowIdx,\n  className,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  style,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    {\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        ...style\n      }}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nconst CellComponent = memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => React.JSX.Element;\n\nexport default CellComponent;\n\nexport function defaultRenderCell<R, SR>(key: React.Key, props: CellRendererProps<R, SR>) {\n  return <CellComponent key={key} {...props} />;\n}\n", "import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.RefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n", "import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number>(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick ?? true;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            rowIdx,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n", "import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n", "import { useRef, useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  getLeftRightKey,\n  isCtrlKeyHeldDown,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    const { key } = event;\n    if (sortable && (key === ' ' || key === 'Enter')) {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    } else if (\n      resizable &&\n      isCtrlKeyHeldDown(event) &&\n      (key === 'ArrowLeft' || key === 'ArrowRight')\n    ) {\n      // prevent navigation\n      // TODO: check if we can use `preventDefault` instead\n      event.stopPropagation();\n      const { width } = event.currentTarget.getBoundingClientRect();\n      const { leftKey } = getLeftRightKey(direction);\n      const offset = key === leftKey ? -10 : 10;\n      const newWidth = clampColumnWidth(width + offset, column);\n      if (newWidth !== width) {\n        onColumnResize(column, newWidth);\n      }\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // The dragDropKey is derived from the useId() hook, which can sometimes generate keys with uppercase letters.\n    // When setting data using event.dataTransfer.setData(), the key is automatically converted to lowercase in some browsers.\n    // To ensure consistent comparison, we normalize the dragDropKey to lowercase before checking its presence in the event's dataTransfer types.\n    // https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface\n    if (event.dataTransfer.types.includes(dragDropKey.toLowerCase())) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey.toLowerCase());\n      if (sourceKey !== column.key) {\n        // prevent the browser from redirecting in some cases\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.ComponentProps<'div'> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={onKeyDown}\n      {...draggableProps}\n    >\n      {column.renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <ResizeHandle column={column} onColumnResize={onColumnResize} direction={direction} />\n      )}\n    </div>\n  );\n}\n\ntype ResizeHandleProps<R, SR> = Pick<\n  HeaderCellProps<R, SR>,\n  'column' | 'onColumnResize' | 'direction'\n>;\n\nfunction ResizeHandle<R, SR>({ column, onColumnResize, direction }: ResizeHandleProps<R, SR>) {\n  const resizingOffsetRef = useRef<number>(undefined);\n  const isRtl = direction === 'rtl';\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    currentTarget.setPointerCapture(pointerId);\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    resizingOffsetRef.current = isRtl ? event.clientX - left : right - event.clientX;\n  }\n\n  function onPointerMove(event: React.PointerEvent<HTMLDivElement>) {\n    const offset = resizingOffsetRef.current;\n    if (offset === undefined) return;\n    const { width, right, left } = event.currentTarget.parentElement!.getBoundingClientRect();\n    let newWidth = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n    newWidth = clampColumnWidth(newWidth, column);\n    if (width > 0 && newWidth !== width) {\n      onColumnResize(column, newWidth);\n    }\n  }\n\n  function onLostPointerCapture() {\n    resizingOffsetRef.current = undefined;\n  }\n\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n\n  return (\n    <div\n      className={resizeHandleClassname}\n      onClick={stopPropagation}\n      onPointerDown={onPointerDown}\n      onPointerMove={onPointerMove}\n      // we are not using pointerup because it does not fire in some cases\n      // pointer down -> alt+tab -> pointer up over another window -> pointerup event not fired\n      onLostPointerCapture={onLostPointerCapture}\n      onDoubleClick={onDoubleClick}\n    />\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n", "import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      block-size: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n", "import { memo, useId } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Maybe, Position, ResizedWidth } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: ResizedWidth) => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n  headerRowClass: Maybe<string>;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  headerRowClass,\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const dragDropKey = useId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(\n        headerRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1\n        },\n        headerRowClass\n      )}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => React.JSX.Element;\n", "import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => React.JSX.Element;\n", "import { memo, useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionContext, useLatestFunc, type RowSelectionContextValue } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>({\n  className,\n  rowIdx,\n  gridRowStart,\n  selectedCellIdx,\n  isRowSelectionDisabled,\n  isRowSelected,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellEditor,\n  onCellClick,\n  onCellDoubleClick,\n  onCellContextMenu,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  onRowChange,\n  selectCell,\n  ...props\n}: RenderRowProps<R, SR>) {\n  const renderCell = useDefaultRenderers<R, SR>()!.renderCell!;\n\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        renderCell(column.key, {\n          column,\n          colSpan,\n          row,\n          rowIdx,\n          isDraggedOver: draggedOverCellIdx === idx,\n          isCellSelected,\n          onClick: onCellClick,\n          onDoubleClick: onCellDoubleClick,\n          onContextMenu: onCellContextMenu,\n          onRowChange: handleRowChange,\n          selectCell\n        })\n      );\n    }\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelected, isRowSelectionDisabled }),\n    [isRowSelectionDisabled, isRowSelected]\n  );\n\n  return (\n    <RowSelectionContext value={selectionValue}>\n      <div\n        role=\"row\"\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionContext>\n  );\n}\n\nconst RowComponent = memo(Row) as <R, SR>(props: RenderRowProps<R, SR>) => React.JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n", "import { useLayoutEffect, useRef } from 'react';\n\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridRef,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridRef: React.RefObject<HTMLDivElement | null>;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridRef.current!,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridRef, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n", "import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-color: #66afe9;\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n\n    &:dir(rtl) {\n      --rdg-cell-frozen-box-shadow: -2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    }\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n    accent-color: light-dark(hsl(207deg 100% 29%), hsl(207deg 100% 79%));\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => React.JSX.Element;\n", "import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => React.JSX.Element;\n", "import {\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport type { Key, KeyboardEvent } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  HeaderRowSelectionChangeContext,\n  HeaderRowSelectionContext,\n  RowSelectionChangeContext,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useViewportColumns,\n  useViewportRows,\n  type HeaderRowSelectionContextValue\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getLeftRightKey,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellClipboardEvent,\n  CellCopyEvent,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellPasteEvent,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  Direction,\n  FillEvent,\n  Maybe,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectHeaderRowEvent,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { defaultRenderCell } from './Cell';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersContext,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersContext';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\nexport type DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  | 'renderCell'\n  | 'renderHeaderCell'\n  | 'width'\n  | 'minWidth'\n  | 'maxWidth'\n  | 'resizable'\n  | 'sortable'\n  | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.ComponentProps<'div'>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-description'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  ref?: Maybe<React.Ref<DataGridHandle>>;\n  /**\n   * Grid and data Props\n   */\n  /** An array of column definitions */\n  columns: readonly ColumnOrColumnGroup<NoInfer<R>, NoInfer<SR>>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /** Rows pinned at the top of the grid for summary purposes */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /** Rows pinned at the bottom of the grid for summary purposes */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** Function to return a unique key/identifier for each row */\n  rowKeyGetter?: Maybe<(row: NoInfer<R>) => K>;\n  /** Callback triggered when rows are changed */\n  onRowsChange?: Maybe<(rows: NoInfer<R>[], data: RowsChangeData<NoInfer<R>, NoInfer<SR>>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * Height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: NoInfer<R>) => number)>;\n  /**\n   * Height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * Height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** A set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function to determine if row selection is disabled for a specific row */\n  isRowSelectionDisabled?: Maybe<(row: NoInfer<R>) => boolean>;\n  /** Callback triggered when the selection changes */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<NoInfer<K>>) => void>;\n  /** An array of sorted columns */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  /** Callback triggered when sorting changes */\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  /** Default options applied to all columns */\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<NoInfer<R>, NoInfer<SR>>>;\n  onFill?: Maybe<(event: FillEvent<NoInfer<R>>) => NoInfer<R>>;\n\n  /**\n   * Event props\n   */\n  /** Callback triggered when a cell is clicked */\n  onCellClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Callback triggered when a cell is double-clicked */\n  onCellDoubleClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Callback triggered when a cell is right-clicked */\n  onCellContextMenu?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Callback triggered when a key is pressed in a cell */\n  onCellKeyDown?: Maybe<\n    (args: CellKeyDownArgs<NoInfer<R>, NoInfer<SR>>, event: CellKeyboardEvent) => void\n  >;\n  /** Callback triggered when a cell's content is copied */\n  onCellCopy?: Maybe<\n    (args: CellCopyEvent<NoInfer<R>, NoInfer<SR>>, event: CellClipboardEvent) => void\n  >;\n  /** Callback triggered when content is pasted into a cell */\n  onCellPaste?: Maybe<\n    (args: CellPasteEvent<NoInfer<R>, NoInfer<SR>>, event: CellClipboardEvent) => NoInfer<R>\n  >;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<NoInfer<R>, NoInfer<SR>>) => void>;\n  /** Callback triggered when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Callback triggered when column is resized */\n  onColumnResize?: Maybe<(column: CalculatedColumn<R, SR>, width: number) => void>;\n  /** Callback triggered when columns are reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  /** Custom renderers for cells, rows, and other components */\n  renderers?: Maybe<Renderers<NoInfer<R>, NoInfer<SR>>>;\n  /** Function to apply custom class names to rows */\n  rowClass?: Maybe<(row: NoInfer<R>, rowIdx: number) => Maybe<string>>;\n  /** Custom class name for the header row */\n  headerRowClass?: Maybe<string>;\n  /**\n   * Text direction of the grid ('ltr' or 'rtl')\n   * @default 'ltr'\n   * */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n  'data-cy'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nexport function DataGrid<R, SR = unknown, K extends Key = Key>(props: DataGridProps<R, SR, K>) {\n  const {\n    ref,\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    isRowSelectionDisabled,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCellCopy,\n    onCellPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    headerRowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-description': ariaDescription,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId,\n    'data-cy': dataCy\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderCell = renderers?.renderCell ?? defaultRenderers?.renderCell ?? defaultRenderCell;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n  const [shouldFocusCell, setShouldFocusCell] = useState(false);\n  const [previousRowIdx, setPreviousRowIdx] = useState(-1);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const { leftKey, rightKey } = getLeftRightKey(direction);\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus,\n      renderCell\n    }),\n    [renderCheckbox, renderSortStatus, renderCell]\n  );\n\n  const headerSelectionValue = useMemo((): HeaderRowSelectionContextValue => {\n    // no rows to select = explicitely unchecked\n    let hasSelectedRow = false;\n    let hasUnselectedRow = false;\n\n    if (rowKeyGetter != null && selectedRows != null && selectedRows.size > 0) {\n      for (const row of rows) {\n        if (selectedRows.has(rowKeyGetter(row))) {\n          hasSelectedRow = true;\n        } else {\n          hasUnselectedRow = true;\n        }\n\n        if (hasSelectedRow && hasUnselectedRow) break;\n      }\n    }\n\n    return {\n      isRowSelected: hasSelectedRow && !hasUnselectedRow,\n      isIndeterminate: hasSelectedRow && hasUnselectedRow\n    };\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight =\n    headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectHeaderRowLatest = useLatestFunc(selectHeaderRow);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  const focusCellOrCellContent = useCallback(() => {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }, [gridRef]);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      focusSinkRef.current !== null &&\n      selectedCellIsWithinSelectionBounds &&\n      selectedPosition.idx === -1\n    ) {\n      focusSinkRef.current.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  }, [selectedCellIsWithinSelectionBounds, selectedPosition]);\n\n  useLayoutEffect(() => {\n    if (shouldFocusCell) {\n      setShouldFocusCell(false);\n      focusCellOrCellContent();\n    }\n  }, [shouldFocusCell, focusCellOrCellContent]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * event handlers\n   */\n  function selectHeaderRow(args: SelectHeaderRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    const newSelectedRows = new Set(selectedRows);\n    for (const row of rows) {\n      if (isRowSelectionDisabled?.(row) === true) continue;\n      const rowKey = rowKeyGetter(row);\n      if (args.checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const { row, checked, isShiftClick } = args;\n    if (isRowSelectionDisabled?.(row) === true) return;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    const rowIdx = rows.indexOf(row);\n    setPreviousRowIdx(rowIdx);\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n    } else {\n      newSelectedRows.delete(rowKey);\n    }\n\n    if (\n      isShiftClick &&\n      previousRowIdx !== -1 &&\n      previousRowIdx !== rowIdx &&\n      previousRowIdx < rows.length\n    ) {\n      const step = sign(rowIdx - previousRowIdx);\n      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n        const row = rows[i];\n        if (isRowSelectionDisabled?.(row) === true) continue;\n        if (checked) {\n          newSelectedRows.add(rowKeyGetter(row));\n        } else {\n          newSelectedRows.delete(rowKeyGetter(row));\n        }\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCellCopy(event: CellClipboardEvent) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const { idx, rowIdx } = selectedPosition;\n    onCellCopy?.({ row: rows[rowIdx], column: columns[idx] }, event);\n  }\n\n  function handleCellPaste(event: CellClipboardEvent) {\n    if (!onCellPaste || !onRowsChange || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const updatedRow = onCellPaste({ row: rows[rowIdx], column }, event);\n    updateRow(column, rowIdx, updatedRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // prevent scrolling\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event, onCellPaste != null)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      setShouldFocusCell(true);\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row: isRowIdxWithinViewportBounds(position.rowIdx) ? rows[position.rowIdx] : undefined,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // prevent scrolling and do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    const closeOnExternalRowChange = column.editorOptions?.closeOnExternalRowChange ?? true;\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      setShouldFocusCell(shouldFocusCell);\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (\n      closeOnExternalRowChange &&\n      rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n    ) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelectionDisabled: isRowSelectionDisabled?.(row) ?? false,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    // biome-ignore lint/a11y/useValidAriaProps: aria-description is a valid prop\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-description={ariaDescription}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-scroll-height': `${scrollHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      onCopy={handleCellCopy}\n      onPaste={handleCellPaste}\n      data-testid={testId}\n      data-cy={dataCy}\n    >\n      <DataGridDefaultRenderersContext value={defaultGridComponents}>\n        <HeaderRowSelectionChangeContext value={selectHeaderRowLatest}>\n          <HeaderRowSelectionContext value={headerSelectionValue}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              headerRowClass={headerRowClass}\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </HeaderRowSelectionContext>\n        </HeaderRowSelectionChangeContext>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + 1 + rowIdx;\n              const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  key={rowIdx}\n                  aria-rowindex={gridRowStart}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeContext value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeContext>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultRenderersContext>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridRef={gridRef}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n", "import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => React.JSX.Element;\n", "import { memo, useMemo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionContext, type RowSelectionContextValue } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child, .${cellFrozen}),\n    > :nth-last-child(n + 2 of .${cellFrozen}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  groupBy,\n  toggleGroup,\n  isRowSelectionDisabled,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelectionDisabled: false, isRowSelected }),\n    [isRowSelected]\n  );\n\n  return (\n    <RowSelectionContext value={selectionValue}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionContext>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(\n  props: GroupRowRendererProps<R, SR>\n) => React.JSX.Element;\n", "import { useCallback, useMemo } from 'react';\nimport type { Key } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, getLeftRightKey } from './utils';\nimport type {\n  CellClipboardEvent,\n  CellCopyEvent,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellPasteEvent,\n  Column,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup } from './cellRenderers';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport { DataGrid } from './DataGrid';\nimport type { DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<\n    DataGridProps<R, SR, K>,\n    'columns' | 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill' | 'isRowSelectionDisabled'\n  > {\n  columns: readonly Column<NoInfer<R>, NoInfer<SR>>[];\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<NoInfer<R>>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (\n    rows: readonly NoInfer<R>[],\n    columnKey: string\n  ) => Record<string, readonly NoInfer<R>[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n  groupIdGetter?: Maybe<(groupKey: string, parentId?: string) => string>;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nexport function TreeDataGrid<R, SR = unknown, K extends Key = Key>({\n  columns: rawColumns,\n  rows: rawRows,\n  rowHeight: rawRowHeight,\n  rowKeyGetter: rawRowKeyGetter,\n  onCellKeyDown: rawOnCellKeyDown,\n  onCellCopy: rawOnCellCopy,\n  onCellPaste: rawOnCellPaste,\n  onRowsChange,\n  selectedRows: rawSelectedRows,\n  onSelectedRowsChange: rawOnSelectedRowsChange,\n  renderers,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  groupIdGetter: rawGroupIdGetter,\n  ...props\n}: TreeDataGridProps<R, SR, K>) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const { leftKey, rightKey } = getLeftRightKey(props.direction);\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n  const groupIdGetter = rawGroupIdGetter ?? defaultGroupIdGetter;\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        const id = groupIdGetter(groupKey, parentId);\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows, groupIdGetter]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      // prevent scrolling\n      event.preventDefault();\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n  }\n\n  // Prevent copy/paste on group rows\n  function handleCellCopy(\n    { row, column }: CellCopyEvent<NoInfer<R>, NoInfer<SR>>,\n    event: CellClipboardEvent\n  ) {\n    if (!isGroupRow(row)) {\n      rawOnCellCopy?.({ row, column }, event);\n    }\n  }\n\n  function handleCellPaste(\n    { row, column }: CellPasteEvent<NoInfer<R>, NoInfer<SR>>,\n    event: CellClipboardEvent\n  ) {\n    return isGroupRow(row) ? row : rawOnCellPaste!({ row, column }, event);\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    for (const index of indexes) {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    }\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n\n  return (\n    <DataGrid<R, SR>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      onCellCopy={handleCellCopy}\n      onCellPaste={rawOnCellPaste ? handleCellPaste : undefined}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction defaultGroupIdGetter(groupKey: string, parentId: string | undefined) {\n  return parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n", "import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,SAAS,EAAE,GAAE;AAAC,MAAI,GAAE,GAAE,IAAE;AAAG,MAAG,YAAU,OAAO,KAAG,YAAU,OAAO,EAAE,MAAG;AAAA,WAAU,YAAU,OAAO,EAAE,KAAG,MAAM,QAAQ,CAAC,GAAE;AAAC,QAAI,IAAE,EAAE;AAAO,SAAI,IAAE,GAAE,IAAE,GAAE,IAAI,GAAE,CAAC,MAAI,IAAE,EAAE,EAAE,CAAC,CAAC,OAAK,MAAI,KAAG,MAAK,KAAG;AAAA,EAAE,MAAM,MAAI,KAAK,EAAE,GAAE,CAAC,MAAI,MAAI,KAAG,MAAK,KAAG;AAAG,SAAO;AAAC;AAAQ,SAAS,OAAM;AAAC,WAAQ,GAAE,GAAE,IAAE,GAAE,IAAE,IAAG,IAAE,UAAU,QAAO,IAAE,GAAE,IAAI,EAAC,IAAE,UAAU,CAAC,OAAK,IAAE,EAAE,CAAC,OAAK,MAAI,KAAG,MAAK,KAAG;AAAG,SAAO;AAAC;AAAC,IAAO,eAAQ;;;;ACExX,SAAS,WACdA,QACAC,uBACAC,MACoB;AACpB,QAAM,UAAA,OAAiB,OAAO,YAAY,aAAa,OAAO,QAAQ,IAAA,IAAQ;AAC9E,MACE,OAAO,UAAU,OAAA,KACjB,UAAW,MAAA,CAET,OAAO,UAAU,OAAO,MAAM,UAAW,KAAK,uBAEhD,QAAO;AAET,SAAA;AACD;ACfM,SAAS,gBAAgBC,OAA6B;AAC3D,QAAM,gBAAA;AACP;AAEM,SAAS,eAAeC,SAAyB;AACtD,qCAAS,eAAe;IAAE,QAAQ;IAAW,OAAO;EAAW;AAChE;ACNM,SAAS,gBACdC,OACc;AACd,MAAI,mBAAmB;AACvB,QAAM,YAAY;IAChB,GAAG;IACH,qBAAqB;AACnB,yBAAmB;IACpB;IACD,yBAAyB;AACvB,aAAO;IACR;EACF;AAED,SAAO,eAAe,WAAW,OAAO,eAAe,KAAA,CAAM;AAE7D,SAAO;AACR;AChBD,IAAM,eAAe,oBAAI,IAAI;EAE3B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EAEA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CAAA;AAEM,SAAS,kBAAkBC,GAAiC;AACjE,UAAQ,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ;AAC9C;AAID,IAAM,OAAO;AAEN,SAAS,mBACdC,OACAC,qBACS;AAET,MAAI,kBAAkB,KAAA,MAAW,MAAM,YAAY,QAAQ,qBAAsB,QAAO;AACxF,SAAA,CAAQ,aAAa,IAAI,MAAM,GAAA;AAChC;AAQM,SAAS,mBAAmB,EAAE,KAAK,OAAA,GAAwD;;AAChG,MACE,QAAQ,UACP,kBAAkB,oBACjB,kBAAkB,uBAClB,kBAAkB,mBAEpB,UACE,YAAO,QAAQ,uBAAA,MAAf,mBAAyC,iBAAiB,2BACvD,YAAW;AAGlB,SAAO;AACR;AAEM,SAAS,gBAAgBC,WAA6B;AAC3D,QAAM,QAAQ,cAAc;AAE5B,SAAO;IACL,SAAS,QAAQ,eAAe;IAChC,UAAU,QAAQ,cAAc;EACjC;AACF;AC7FD,IAAMC,yBAAsB;AAQrB,SAASC,qBAA4BC,iBAAqD;AAC/F,SAAOA,gBAAgBC,IAAI,CAAC,EAAEC,KAAKC,KAAKC,UAAUC,SAAAA,UAChD,wBAAC,OAAA;IAEC,WAAWP;IACX,OAAO;MAAEQ,iBAAiBH,MAAM;MAAGC;MAAUC;IAAU;IACvD,2BAAyBH;KAHpBA,GAAAA,CAKR;AACH;ACNO,SAAS,uBAA8B,EAC5C,kBACA,SACA,KAAA,GAC6C;AAC7C,QAAM,SAAS,QAAQ,iBAAiB,GAAA;AACxC,QAAMK,QAAM,KAAK,iBAAiB,MAAA;AAClC,SAAO,mBAAmB,QAAQA,KAAAA;AACnC;AAGM,SAAS,mBAA0BnB,QAAiCoB,OAAiB;AAC1F,SACE,OAAO,kBAAkB,SAAA,OACjB,OAAO,aAAa,aAAa,OAAO,SAASD,KAAAA,IAAO,OAAO,cAAc;AAExF;AAoBD,SAAS,uBAA8B,EACrC,MACA,gBACA,mBACA,QACA,kBACA,uBACA,OAAA,GAOC;AACD,QAAM,uBAAsB,iDAAgB,WAAU;AACtD,MAAI,WAAW,iBACb,QAAO,WAAW,QAAQ,uBAAuB,EAAE,MAAM,SAAU,CAAA;AAGrE,MACE,kBACA,SAAS,oBACT,UAAU,sBAAsB,iBAEhC,QAAO,WAAW,QAAQ,uBAAuB;IAC/C,MAAM;IACN,KAAK,eAAe,SAAS,mBAAA;EAC9B,CAAA;AAGH,MAAI,UAAU,KAAK,SAAS,KAAK,QAAQ;AACvC,UAAMA,QAAM,KAAK,MAAA;AACjB,WAAO,WAAW,QAAQ,uBAAuB;MAAE,MAAM;MAAO,KAAA;IAAK,CAAA;EACtE;AAED,MAAI,kBACF,QAAO,WAAW,QAAQ,uBAAuB;IAC/C,MAAM;IACN,KAAK,kBAAkB,SAAS,KAAK,MAAA;EACtC,CAAA;AAGH,SAAA;AACD;AAEM,SAAS,4BAAmC,EACjD,QACA,UACA,oBACA,SACA,gBACA,MACA,gBACA,mBACA,WACA,kBACA,WACA,iBAAiB,EAAE,KAAK,YAAY,QAAQ,cAAA,GAC5C,cACA,uBACA,mBAAA,GACmD;AACnD,MAAI,EAAE,KAAK,SAAS,QAAQ,WAAA,IAAe;AAC3C,QAAM,eAAe,QAAQ;AAE7B,QAAM,aAAa,CAACE,eAAsB;AAGxC,eAAW,UAAU,gBAAgB;AACnC,YAAM,SAAS,OAAO;AACtB,UAAI,SAAS,QAAS;AACtB,YAAM,UAAU,uBAAuB;QACrC;QACA;QACA;QACA,QAAQ;QACR;QACA;QACA;MACD,CAAA;AAED,UAAI,WAAW,UAAU,UAAU,UAAU,UAAU,QAAQ;AAC7D,kBAAU,UAAUC,aAAW,UAAU;AACzC;MACD;IACF;EACF;AAED,QAAM,kBAAkB,CAACC,WAA0C;AACjE,WAAO,OAAO,QAAQ;EACvB;AAED,QAAM,8BAA8B,MAAM;AACxC,QAAI,UAAU;AAEZ,YAAM,aAAa,QAAQ,OAAA;AAC3B,UAAI,SAAS,WAAW;AACxB,aAAO,WAAA,QAAsB;AAC3B,cAAM,eAAe,gBAAgB,MAAA;AACrC,YAAI,eAAe,cAAc;AAC/B,oBAAU,OAAO,MAAM,OAAO;AAC9B;QACD;AACD,iBAAS,OAAO;MACjB;IACF,WAAU,QAAQ;AAEjB,YAAM,aAAa,QAAQ,OAAA;AAC3B,UAAI,SAAS,WAAW;AACxB,UAAI,QAAQ;AACZ,aAAO,WAAA,QAAsB;AAC3B,cAAM,eAAe,gBAAgB,MAAA;AACrC,YAAI,cAAc,cAAc;AAC9B,oBAAU,OAAO;AACjB,uBAAa;AACb,kBAAQ;AACR;QACD;AACD,iBAAS,OAAO;MACjB;AAGD,UAAA,CAAK,OAAO;AACV,kBAAU;AACV,qBAAa;MACd;IACF;EACF;AAED,MAAI,mBAAmB,YAAA,GAAe;AACpC,eAAW,QAAA;AAEX,QAAI,aAAa,iBACf,6BAAA;EAEH;AAED,MAAI,uBAAuB,cAAc;AACvC,UAAM,oBAAoB,YAAY;AACtC,UAAM,sBAAsB,YAAY;AAExC,QAAI,mBAAmB;AACrB,YAAM,YAAY,eAAe;AACjC,UAAA,CAAK,WAAW;AACd,kBAAU;AACV,sBAAc;MACf;IACF,WAAU,qBAAqB;AAC9B,YAAM,aAAa,eAAe;AAClC,UAAA,CAAK,YAAY;AACf,sBAAc;AACd,kBAAU,eAAe;MAC1B;AACD,iBAAW,KAAA;IACZ;EACF;AAED,MAAI,aAAa,kBAAkB;AAIjC,UAAM,aAAa,QAAQ,OAAA;AAC3B,QAAI,SAAS,WAAW;AACxB,UAAM,mBAAmB;AACzB,iBAAa;AACb,WAAO,WAAA,QAAsB;AAC3B,YAAM,eAAe,gBAAgB,MAAA;AACrC,UAAI,gBAAgB,kBAAkB;AACpC,qBAAa;AACb,kBAAU,OAAO;MAClB;AACD,eAAS,OAAO;IACjB;EACF;AAED,SAAO;IAAE,KAAK;IAAS,QAAQ;EAAY;AAC5C;AAUM,SAAS,YAAY,EAC1B,WACA,WACA,WACA,kBAAkB,EAAE,QAAQ,IAAA,GAC5B,SAAA,GAC2B;AAE3B,QAAM,kBAAkB,QAAQ;AAChC,QAAM,mBAAmB,QAAQ;AACjC,QAAM,YAAY,WAAW;AAC7B,QAAM,aAAa,WAAW;AAE9B,SAAO,WAAW,oBAAoB,aAAa,mBAAmB;AACvE;IC1PYC,OAAI;IA6BJC,gBAAAA,YAA4BD,IAAAA;IAE5BE,aAAU;IAaVC,sBAAAA,mBAAyCD,UAAAA;ACxC/C,SAAS,YAAYE,QAA+B;AACzD,SAAO,EAAE,wBAAwB,OAAQ;AAC1C;AAEM,SAAS,mBACdC,QACAD,QACAE,SACqB;AACrB,QAAM,aAAa,SAAS;AAC5B,QAAM,oBAAA,QAA4B,UAAU,CAAA;AAE5C,MAAI,OAAO,WAAA,OACT,QAAO;IACL,iBAAiB;IACjB,cAAc;IACd;IACA;EACD;AAGH,SAAO;IACL,iBAAA,QAAyB,SAAS,OAAA;IAClC,cAAc,aAAa;IAC3B;IACA;EACD;AACF;AAEM,SAAS,aACd9B,QACA,UAAU,GACW;AACrB,QAAM,QAAQ,OAAO,MAAM;AAC3B,SAAO;IACL,iBAAiB;IACjB,eAAe,QAAQ;IACvB,kBAAkB,OAAO,SAAA,yBAAkC,OAAO,GAAA,MAAI;EACvE;AACF;AAEM,SAAS,iBACdA,WACG,cACK;AACR,SAAO,aACL,eACA,EAAA,CACG,mBAAA,GAAsB,OAAO,OAC/B,GACD,GAAG,YAAA;AAEN;AChDM,IAAM,EAAE,KAAK,KAAK,OAAO,MAAM,IAAA,IAAQ;AAEvC,SAAS,uBACd+B,WACoC;AACpC,MAAA,OAAW,cAAc,WACvB,OAAM,IAAI,MAAM,uDAAA;AAEnB;AAEM,SAAS,iBACdC,OACA,EAAE,UAAU,SAAA,GACJ;AACR,UAAQ,IAAI,OAAO,QAAA;AAGnB,MAAA,OAAW,aAAa,YAAY,YAAY,SAC9C,QAAO,IAAI,OAAO,QAAA;AAGpB,SAAO;AACR;AAEM,SAAS,qBACdH,QACAD,QACA;AACA,SAAO,OAAO,WAAA,SAAuB,SAAS,OAAO,QAAQ,OAAO,OAAO;AAC5E;ACnCD,IAAMK,WAAQ;AAkBd,IAAMC,oBAAAA,sBAA0CD,QAAAA;AAEzC,SAASE,eAAe,EAAEC,UAAUC,eAAe,GAAGC,MAAAA,GAA8B;AACzF,WAASC,aAAaC,GAAwC;AAC5DJ,aAASI,EAAEC,OAAOC,SAAUF,EAAEG,YAA2BC,QAAAA;EAC3D;AAEA,aACE,wBAAC,SAAA;IACC,KAAMC,CAAAA,OAAO;AACX,UAAIA,GACFA,IAAGR,gBAAgBA,kBAAkB;IAExC;IACD,MAAK;IACL,WAAWH;IACX,UAAUK;IACV,GAAID;;AAGV;ACtCA,IAAMQ,mBAAgB;AAMtB,IAAMC,4BAAAA,0BAAsDD,gBAAAA;AAE5D,IAAME,QAAK;AAcX,IAAMC,iBAAAA,aAA8BD,KAAAA;AAE7B,SAASE,kBAAyBZ,OAAoC;AAC3E,aAAO,wBAAC,aAAA,EAAY,GAAIA,MAAAA,CAAAA;AAC1B;AAEO,SAASa,YAAmB,EACjCC,UACAC,YACAC,UACAC,YAAAA,GAC8B;AAC9B,WAASC,cAAc,EAAE1C,IAAAA,GAA6C;AACpE,QAAIA,QAAQ,QACVyC,aAAAA;EAEJ;AAEA,QAAME,IAAIJ,aAAa,sBAAsB;AAE7C,aACE,yBAAC,QAAA;IAAK,WAAWN;IAAqCO;IAAU,WAAWE;eACxEJ,cACD,wBAAC,OAAA;MAAI,SAAQ;MAAW,OAAM;MAAK,QAAO;MAAI,WAAWH;MAAgB,eAAA;oBACvE,wBAAC,QAAA,EAAQQ,EAAAA,CAAAA;MACN;;AAGX;ACpDO,SAAS,YAAmBC,OAA+B;AAChE,MAAI;AACF,WAAO,MAAM,IAAI,MAAM,OAAO,GAAA;EAC/B,QAAO;AACN,WAAO;EACR;AACF;ICHY,sCAAkC,4BAAA,MAAA;AAExC,SAAS,sBAAsD;AACpE,aAAO,yBAAW,+BAAA;AACnB;ACGM,SAAS,oBAAoB,EAClC,OACA,UACA,eACA,UACA,UACA,cAAc,WACd,mBAAmB,eAAA,GACQ;AAC3B,QAAMvB,mBAAiB,oBAAA,EAAuB;AAE9C,SAAO,iBAAe;IACpB,cAAc;IACd,mBAAmB;IACnB;IACA;IACA;IACA,SAAS;IACT;EACD,CAAA;AACF;ICvBY,0BAAsB,4BAAA,MAAA;IAEtB,gCAA4B,4BAAA,MAAA;AAKlC,SAAS,kBAAkB;AAChC,QAAM,0BAAsB,yBAAW,mBAAA;AACvC,QAAM,gCAA4B,yBAAW,yBAAA;AAE7C,MAAI,wBAAA,UAAqC,8BAAA,OACvC,OAAM,IAAI,MAAM,gDAAA;AAGlB,SAAO;IACL,wBAAwB,oBAAoB;IAC5C,eAAe,oBAAoB;IACnC,sBAAsB;EACvB;AACF;IAOY,gCAA4B,4BAAA,MAAA;IAI5B,sCAAkC,4BAAA,MAAA;AAIxC,SAAS,wBAAwB;AACtC,QAAM,gCAA4B,yBAAW,yBAAA;AAC7C,QAAM,sCAAkC,yBAAW,+BAAA;AAEnD,MAAI,8BAAA,UAA2C,oCAAA,OAC7C,OAAM,IAAI,MAAM,4DAAA;AAGlB,SAAO;IACL,iBAAiB,0BAA0B;IAC3C,eAAe,0BAA0B;IACzC,sBAAsB;EACvB;AACF;ICrDY,oBAAoB;AAEjC,SAAS,eAAewB,OAAuC;AAC7D,QAAM,EAAE,iBAAiB,eAAe,qBAAA,IAAyB,sBAAA;AAEjE,aACE,wBAAC,qBAAA;IACC,cAAW;IACX,UAAU,MAAM;IAChB,eAAe;IACf,OAAO;IACP,UAAU,CAAC,YAAY;AACrB,2BAAqB,EAAE,SAAS,kBAAkB,QAAQ,QAAS,CAAA;IACpE;;AAGN;AAED,SAAS,gBAAgBC,OAAiC;AACxD,QAAM,EAAE,wBAAwB,eAAe,qBAAA,IAAyB,gBAAA;AAExE,aACE,wBAAC,qBAAA;IACC,cAAW;IACX,UAAU,MAAM;IAChB,UAAU;IACV,OAAO;IACP,UAAU,CAAC,SAAS,iBAAiB;AACnC,2BAAqB;QAAE,KAAK,MAAM;QAAK;QAAS;MAAc,CAAA;IAC/D;;AAGN;AAED,SAAS,qBAAqBC,OAAsC;AAClE,QAAM,EAAE,eAAe,qBAAA,IAAyB,gBAAA;AAEhD,aACE,wBAAC,qBAAA;IACC,cAAW;IACX,UAAU,MAAM;IAChB,OAAO;IACP,UAAU,CAAC,YAAY;AACrB,2BAAqB;QAAE,KAAK,MAAM;QAAK;QAAS,cAAc;MAAO,CAAA;IACtE;;AAGN;IAGYC,eAAiC;EAC5C,KAAK;EACL,MAAM;EACN,OAAO;EACP,UAAU;EACV,UAAU;EACV,WAAW;EACX,UAAU;EACV,QAAQ;EACR,iBAAiB,OAAO;AACtB,eAAO,wBAAC,gBAAA,EAAe,GAAI,MAAA,CAAA;EAC5B;EACD,WAAW,OAAO;AAChB,eAAO,wBAAC,iBAAA,EAAgB,GAAI,MAAA,CAAA;EAC7B;EACD,gBAAgB,OAAO;AACrB,eAAO,wBAAC,sBAAA,EAAqB,GAAI,MAAA,CAAA;EAClC;AACF;ACnED,IAAMC,0BAAuB;AAM7B,IAAMC,iBAAc;AAQpB,IAAMC,0BAAAA,wBAAkDD,cAAAA;AAEzC,SAASE,iBAAwB,EAC9CC,QACAC,eACAC,SAAAA,GAC+B;AAC/B,MAAA,CAAKF,OAAOG,SAAU,QAAOH,OAAOI;AAEpC,aACE,wBAAC,oBAAA;IAAkCH;IAAyBC;cACzDF,OAAOI;;AAGd;AAWA,SAASC,mBAA0B,EACjCJ,eACAC,UACAI,SAAAA,GACiC;AACjC,QAAMC,qBAAmBC,oBAAAA,EAA8BD;AAEvD,aACE,yBAAC,QAAA;IAAK,WAAWX;mBACf,wBAAC,QAAA;MAAK,WAAWE;MAA0BQ;YAC3C,wBAAC,QAAA,EAAA,UAAMC,mBAAiB;MAAEN;MAAeC;IAAU,CAAA,EAAC,CAAA,CAAO;;AAGjE;AC9BA,IAAM,uBAAuB;AAC7B,IAAM,2BAA2B;AAW1B,SAAS,qBAA4B,EAC1C,YACA,sBACA,gBACA,eACA,YACA,qBAAA,GAC+B;AAC/B,QAAM,gBAAe,6DAAsB,UAAS;AACpD,QAAM,mBAAkB,6DAAsB,aAAY;AAC1D,QAAM,mBAAkB,6DAAsB,aAAA;AAC9C,QAAMO,uBAAoB,6DAAsB,eAAc;AAC9D,QAAM,2BAA0B,6DAAsB,qBAAoB;AAC1E,QAAM,mBAAkB,6DAAsB,aAAY;AAC1D,QAAM,oBAAmB,6DAAsB,cAAa;AAC5D,QAAM,oBAAmB,6DAAsB,cAAa;AAE5D,QAAM,EAAE,SAAS,gBAAgB,uBAAuB,gBAAA,QAAoB,sBAAQ,MAK/E;AACH,QAAIC,0BAAwB;AAC5B,QAAIC,oBAAkB;AACtB,UAAMC,YAA4C,CAAE;AAEpD,mBAAe,YAAY,CAAA;AAE3B,aAAS,eACPC,cACAC,OACAC,QACA;AACA,iBAAW,aAAaC,cAAY;AAClC,YAAI,cAAc,WAAW;AAC3B,gBAAMC,yBAA+D;YACnE,MAAM,UAAU;YAChB;YACA,KAAK;YACL,SAAS;YACT,OAAO;YACP,iBAAiB,UAAU;UAC5B;AAED,yBAAe,UAAU,UAAU,QAAQ,GAAG,sBAAA;AAC9C;QACD;AAED,cAAM,SAAS,UAAU,UAAU;AAEnC,cAAMC,SAAyC;UAC7C,GAAG;UACH;UACA,KAAK;UACL,OAAO;UACP;UACA,OAAO,UAAU,SAAS;UAC1B,UAAU,UAAU,YAAY;UAChC,UAAU,UAAU,YAAY;UAChC,UAAU,UAAU,YAAY;UAChC,WAAW,UAAU,aAAa;UAClC,WAAW,UAAU,aAAa;UAClC,YAAY,UAAU,cAAcT;UACpC,kBAAkB,UAAU,oBAAoB;QACjD;AAED,kBAAQ,KAAK,MAAA;AAEb,YAAI,OACF;AAGF,YAAI,QAAQE,kBACV,qBAAkB;MAErB;IACF;AAED,cAAQ,KAAK,CAAC,EAAE,KAAK,MAAM,QAAQ,QAAA,GAAW,EAAE,KAAK,MAAM,QAAQ,QAAA,MAAc;AAE/E,UAAI,SAAS,kBAAmB,QAAO;AACvC,UAAI,SAAS,kBAAmB,QAAO;AAGvC,UAAI,SAAS;AACX,YAAI,QAAS,QAAO;AACpB,eAAO;MACR;AACD,UAAI,QAAS,QAAO;AAKpB,aAAO;IACR,CAAA;AAED,UAAMQ,mBAA4C,CAAE;AACpD,cAAQ,QAAQ,CAAC,QAAQ,QAAQ;AAC/B,aAAO,MAAM;AACb,yBAAmB,QAAQ,KAAK,CAAA;AAEhC,UAAI,OAAO,WAAW,KACpB,kBAAe,KAAK,MAAA;IAEvB,CAAA;AAED,WAAO;MACL,SAAA;MACA,gBAAA;MACA,uBAAA;MACA,iBAAA;IACD;EACF,GAAE;IACD;IACA;IACA;IACA;IACAV;IACA;IACA;IACA;IACA;EACD,CAAA;AAED,QAAM,EAAE,iBAAiB,eAAe,wBAAwB,cAAA,QAAkB,sBAAQ,MAKrF;AACH,UAAMW,kBAAgB,oBAAI,IAAA;AAC1B,QAAI,OAAO;AACX,QAAIC,2BAAyB;AAC7B,UAAMC,oBAA4B,CAAE;AAEpC,eAAW,UAAU,SAAS;AAC5B,UAAI,QAAQ,eAAe,MAAA;AAE3B,UAAA,OAAW,UAAU,SACnB,SAAQ,iBAAiB,OAAO,MAAA;UAIhC,SAAQ,OAAO;AAEjB,wBAAgB,KAAA,GAAQ,KAAA,IAAM;AAC9B,sBAAc,IAAI,QAAQ;QAAE;QAAO;MAAM,CAAA;AACzC,cAAQ;IACT;AAED,QAAI,0BAA0B,IAAI;AAChC,YAAM,eAAe,gBAAc,IAAI,QAAQ,qBAAA,CAAA;AAC/C,iCAAyB,aAAa,OAAO,aAAa;IAC3D;AAED,UAAMC,kBAAwC,CAAE;AAEhD,aAAS,IAAI,GAAG,KAAK,uBAAuB,KAAK;AAC/C,YAAM,SAAS,QAAQ,CAAA;AACvB,sBAAA,qBAAmC,OAAO,GAAA,EAAI,IAAA,GAAQ,gBAAc,IAAI,MAAA,EAAS,IAAA;IAClF;AAED,WAAO;MAAE,iBAAA;MAAiB,eAAA;MAAe,wBAAA;MAAwB,eAAA;IAAe;EACjF,GAAE;IAAC;IAAgB;IAAS;EAAsB,CAAA;AAEnD,QAAM,CAAC,qBAAqB,iBAAA,QAAqB,sBAAQ,MAAwB;AAC/E,QAAA,CAAK,qBACH,QAAO,CAAC,GAAG,QAAQ,SAAS,CAAE;AAGhC,UAAM,eAAe,aAAa;AAClC,UAAM,gBAAgB,aAAa;AAEnC,UAAM,aAAa,QAAQ,SAAS;AACpC,UAAM,yBAAyB,IAAI,wBAAwB,GAAG,UAAA;AAG9D,QAAI,gBAAgB,cAClB,QAAO,CAAC,wBAAwB,sBAAuB;AAIzD,QAAI,qBAAqB;AACzB,WAAO,qBAAqB,YAAY;AACtC,YAAM,EAAE,MAAM,MAAA,IAAU,cAAc,IAAI,QAAQ,kBAAA,CAAA;AAGlD,UAAI,OAAO,QAAQ,aACjB;AAEF;IACD;AAGD,QAAI,mBAAmB;AACvB,WAAO,mBAAmB,YAAY;AACpC,YAAM,EAAE,MAAM,MAAA,IAAU,cAAc,IAAI,QAAQ,gBAAA,CAAA;AAGlD,UAAI,OAAO,SAAS,cAClB;AAEF;IACD;AAED,UAAMC,wBAAsB,IAAI,wBAAwB,qBAAqB,CAAA;AAC7E,UAAMC,sBAAoB,IAAI,YAAY,mBAAmB,CAAA;AAE7D,WAAO,CAACD,uBAAqBC,mBAAkB;EAChD,GAAE;IACD;IACA;IACA;IACA;IACA;IACA;IACA;EACD,CAAA;AAED,SAAO;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;AACF;AAED,SAAS,mBACPC,QACAC,OACAb,OACA;AACA,MAAI,QAAQ,OAAO,MACjB,QAAO,QAAQ;AAGjB,MAAI,OAAO,WAAA,QAAsB;AAC/B,UAAM,EAAE,OAAA,IAAW;AACnB,QAAI,OAAO,QAAQ,GACjB,QAAO,MAAM;AAEf,WAAO,WAAW;AAClB,uBAAmB,QAAQ,OAAO,QAAQ,CAAA;EAC3C;AACF;AC3RM,SAAS,gBACdc,SACAC,iBACAC,iBACAC,SACAC,WACAC,qBACAC,sBACAC,wBACAC,yBACAC,gBACA;AACA,QAAM,CAAC,oBAAoB,qBAAA,QAAyB,uBAG1C,IAAA;AACV,QAAM,CAAC,eAAe,oBAAA,QAAwB,uBAAS,SAAA;AACvD,QAAMC,iBAA0B,QAAQ,WAAW,gBAAgB;AAEnE,QAAMC,kCAEJ,kBAAkB,cAAc;AAClC,QAAM,qBAAqB,CAAC,GAAG,eAAgB;AAC/C,QAAMC,mBAA6B,CAAE;AAErC,aAAW,EAAE,KAAK,KAAK,MAAA,KAAW,gBAChC,KAAI,SAAQ,yDAAoB,MAAK;AACnC,uBAAmB,GAAA,IACjB,mBAAmB,UAAU,gBACzB,mBAAmB,QAAA,GAChB,mBAAmB,KAAA;AAC5B,qBAAiB,KAAK,GAAA;EACvB,WAAA,OACQ,UAAU,aAChB,mCAAA,CAAoC,qBAAqB,IAAI,GAAA,MAAI,CACjE,oBAAoB,IAAI,GAAA,GACzB;AACA,uBAAmB,GAAA,IAAO;AAC1B,qBAAiB,KAAK,GAAA;EACvB;AAGH,QAAM,sBAAsB,mBAAmB,KAAK,GAAA;AAEpD,oCAAgB,oBAAA;AAEhB,WAAS,uBAAuB;AAC9B,yBAAqB,SAAA;AACrB,QAAI,iBAAiB,WAAW,EAAG;AAEnC,4BAAwB,CAACC,2BAAyB;AAChD,YAAM,0BAA0B,IAAI,IAAIA,sBAAAA;AACxC,UAAI,aAAa;AAEjB,iBAAW,OAAO,kBAAkB;AAClC,cAAM,gBAAgB,mBAAmB,SAAS,GAAA;AAClD,oCAAe,kBAAkB,uBAAqB,IAAI,GAAA;AAC1D,YAAI,kBAAA,OACF,yBAAwB,OAAO,GAAA;YAE/B,yBAAwB,IAAI,KAAK,aAAA;MAEpC;AAED,aAAO,aAAa,0BAA0BA;IAC/C,CAAA;AAED,QAAI,uBAAuB,MAAM;AAC/B,YAAM,cAAc,mBAAmB;AACvC,6BAAuB,CAACC,0BAAwB;AAC9C,cAAM,WAAW,sBAAoB,IAAI,WAAA;AACzC,cAAM,WAAW,mBAAmB,SAAS,WAAA;AAC7C,YAAI,aAAA,UAA0B,aAAa,UAAU;AACnD,gBAAM,yBAAyB,IAAI,IAAIA,qBAAAA;AACvC,iCAAuB,IAAI,aAAa,QAAA;AACxC,iBAAO;QACR;AACD,eAAOA;MACR,CAAA;AACD,4BAAsB,IAAA;IACvB;EACF;AAED,WAAS,mBAAmB7G,QAAiC8G,WAAyB;AACpF,UAAM,EAAE,KAAK,YAAA,IAAgB;AAE7B,oCAAU,MAAM;AACd,UAAI,eAEF,yBAAwB,CAACF,2BAAyB;AAChD,cAAM,0BAA0B,IAAI,IAAIA,sBAAAA;AACxC,mBAAW,EAAE,KAAK,MAAA,KAAW,gBAC3B,KAAI,gBAAgB,OAAA,OAAc,UAAU,YAAA,CAAa,oBAAoB,IAAI,GAAA,EAC/E,yBAAwB,OAAO,GAAA;AAGnC,eAAO;MACR,CAAA;AAGH,4BAAsB;QACpB,KAAK;QACL,OAAO;MACR,CAAA;IACF,CAAA;AAED,QAAI,gBAAgB;AAClB,YAAM,gBAAgB,oBAAoB,IAAI,WAAA;AAC9C,YAAM,WAAA,OACG,cAAc,WAAW,YAAY,mBAAmB,SAAS,WAAA;AAC1E,UAAI,aAAA,UAA0B,aAAa,cACzC,gBAAe,QAAQ,QAAA;IAE1B;EACF;AAED,SAAO;IACL;IACA;EACD;AACF;AAED,SAAS,mBAAmBV,SAAiDa,KAAa;;AACxF,QAAM,WAAA,6BAAwC,IAAI,OAAO,GAAA,CAAI;AAC7D,QAAM,iBAAgB,aAAQ,YAAR,mBAAiB,cAAc;AACrD,SAAO,+CAAe,wBAAwB;AAC/C;ACjIM,SAAS,oBAAoB;AAClC,QAAM,cAAU,qBAAuB,IAAA;AACvC,QAAM,CAAC,YAAY,aAAA,QAAiB,uBAAS,CAAA;AAC7C,QAAM,CAAC,WAAW,YAAA,QAAgB,uBAAS,CAAA;AAC3C,QAAM,CAAC,2BAA2B,4BAAA,QAAgC,uBAAS,CAAA;AAE3E,oCAAgB,MAAM;AACpB,UAAM,EAAE,eAAA,IAAmB;AAI3B,QAAI,kBAAkB,KAAM;AAE5B,UAAM,EAAE,aAAa,cAAc,aAAa,aAAA,IAAiB,QAAQ;AACzE,UAAM,EAAE,OAAO,OAAA,IAAW,QAAQ,QAAS,sBAAA;AAC3C,UAAM,mCAAmC,eAAe;AACxD,UAAM,eAAe,QAAQ,cAAc;AAC3C,UAAM,gBAAgB,SAAS;AAE/B,kBAAc,YAAA;AACd,iBAAa,aAAA;AACb,iCAA6B,gCAAA;AAE7B,UAAM,iBAAiB,IAAI,eAAe,CAAC,YAAY;AACrD,YAAM,OAAO,QAAQ,CAAA,EAAG,eAAe,CAAA;AACvC,YAAM,EAAE,cAAA,gBAAc,cAAA,eAAA,IAAiB,QAAQ;AAG/C,sCAAU,MAAM;AACd,sBAAc,KAAK,UAAA;AACnB,qBAAa,KAAK,SAAA;AAClB,qCAA6BC,iBAAeC,cAAAA;MAC7C,CAAA;IACF,CAAA;AACD,mBAAe,QAAQ,QAAQ,OAAA;AAE/B,WAAO,MAAM;AACX,qBAAe,WAAA;IAChB;EACF,GAAE,CAAE,CAAA;AAEL,SAAO;IAAC;IAAS;IAAY;IAAW;EAA0B;AACnE;ACvCM,SAAS,cAAwDC,IAAU;AAChF,QAAM,UAAM,qBAAO,EAAA;AAEnB,8BAAU,MAAM;AACd,QAAI,UAAU;EACf,CAAA;AAED,QAAM,iBAAa,0BAAY,IAAI,SAAqC;AACtE,QAAI,QAAS,GAAG,IAAA;EACjB,GAAE,CAAE,CAAA;AAGL,SAAO,KAAK,aAAa;AAC1B;AChBM,SAAS,kBAAkBC,YAAqB;AAErD,QAAM,CAAC,gBAAgB,iBAAA,QAAqB,uBAAS,KAAA;AAErD,MAAI,kBAAA,CAAmB,WACrB,mBAAkB,KAAA;AAGpB,WAAS,QAAQC,OAAyC;AACxD,QAAI,MAAM,WAAW,MAAM,cACzB,mBAAkB,IAAA;EAErB;AAED,QAAM,cAAc,cAAA,CAAe;AAEnC,SAAO;IACL,UAAU,cAAc,IAAI;IAC5B,eAAe,aAAa,IAAI;IAChC,SAAS,aAAa,UAAA;EACvB;AACF;ACNM,SAAS,mBAA0B,EACxC,SACA,gBACA,MACA,gBACA,mBACA,qBACA,mBACA,uBACA,qBACA,kBAAA,GAC6B;AAE7B,QAAM,eAAW,sBAAQ,MAAM;AAC7B,QAAI,wBAAwB,EAAG,QAAO;AAEtC,QAAIC,aAAW;AAEf,UAAM,iBAAiB,CAACC,QAAgBC,YAAgC;AACtE,UAAI,YAAA,UAAyB,SAAS,UAAU,qBAAqB;AAEnE,qBAAW;AACX,eAAO;MACR;AACD,aAAO;IACR;AAED,eAAW,UAAU,gBAAgB;AAEnC,YAAM,SAAS,OAAO;AACtB,UAAI,UAAUF,WAAU;AACxB,UAAI,eAAe,QAAQ,WAAW,QAAQ,uBAAuB,EAAE,MAAM,SAAU,CAAA,CAAC,EACtF;AAIF,eAAS,SAAS,qBAAqB,UAAU,mBAAmB,UAAU;AAC5E,cAAMlG,QAAM,KAAK,MAAA;AACjB,YACE,eAAe,QAAQ,WAAW,QAAQ,uBAAuB;UAAE,MAAM;UAAO,KAAA;QAAK,CAAA,CAAC,EAEtF;MAEH;AAGD,UAAI,kBAAkB,MACpB;mBAAWA,SAAO,eAChB,KACE,eACE,QACA,WAAW,QAAQ,uBAAuB;UAAE,MAAM;UAAW,KAAA;QAAK,CAAA,CAAC,EAGrE;MAEH;AAGH,UAAI,qBAAqB,MACvB;mBAAWA,SAAO,kBAChB,KACE,eACE,QACA,WAAW,QAAQ,uBAAuB;UAAE,MAAM;UAAW,KAAA;QAAK,CAAA,CAAC,EAGrE;MAEH;IAEJ;AAED,WAAOkG;EACR,GAAE;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD,CAAA;AAED,aAAO,sBAAQ,MAA0C;AACvD,UAAMG,kBAA6C,CAAE;AACrD,aAAS,SAAS,GAAG,UAAU,mBAAmB,UAAU;AAC1D,YAAM,SAAS,QAAQ,MAAA;AAEvB,UAAI,SAAS,YAAA,CAAa,OAAO,OAAQ;AACzC,sBAAgB,KAAK,MAAA;IACtB;AAED,WAAO;EACR,GAAE;IAAC;IAAU;IAAmB;EAAQ,CAAA;AAC1C;ACtGM,SAAS,gBAAmB,EACjC,MACA,WACA,cACA,WACA,qBAAA,GACsB;AACtB,QAAM,EAAE,gBAAgB,kBAAkB,WAAW,cAAc,WAAA,QAAe,sBAAQ,MAAM;AAC9F,QAAA,OAAW,cAAc,SACvB,QAAO;MACL,gBAAgB,YAAY,KAAK;MACjC,kBAAA,WAA6B,KAAK,MAAA,KAAW,SAAA;MAC7C,WAAW,CAAC5F,WAAmB,SAAS;MACxC,cAAc,MAAM;MACpB,YAAY,CAAC6F,WAAmB,MAAM,SAAS,SAAA;IAChD;AAGH,QAAIC,mBAAiB;AACrB,QAAIC,qBAAmB;AAIvB,UAAM,eAAe,KAAK,IAAI,CAACxG,UAAQ;AACrC,YAAM,mBAAmB,UAAUA,KAAAA;AACnC,YAAM,WAAW;QAAE,KAAKuG;QAAgB,QAAQ;MAAkB;AAClE,4BAAA,GAAuB,gBAAA;AACvB,0BAAkB;AAClB,aAAO;IACR,CAAA;AAED,UAAM,iBAAiB,CAAC9F,WAAmB;AACzC,aAAO,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,MAAA,CAAO;IAC3C;AAED,WAAO;MACL,gBAAA;MACA,kBAAA;MACA,WAAW,CAACA,WAAmB,aAAa,eAAe,MAAA,CAAO,EAAE;MACpE,cAAc,CAACA,WAAmB,aAAa,eAAe,MAAA,CAAO,EAAE;MACvE,WAAW6F,QAAgB;AACzB,YAAI,QAAQ;AACZ,YAAI,MAAM,aAAa,SAAS;AAChC,eAAO,SAAS,KAAK;AACnB,gBAAM,SAAS,QAAQ,OAAO,MAAM,SAAS,CAAA;AAC7C,gBAAM,gBAAgB,aAAa,MAAA,EAAQ;AAE3C,cAAI,kBAAkB,OAAQ,QAAO;AAErC,cAAI,gBAAgB,OAClB,SAAQ,SAAS;mBACR,gBAAgB,OACzB,OAAM,SAAS;AAGjB,cAAI,QAAQ,IAAK,QAAO;QACzB;AACD,eAAO;MACR;IACF;EACF,GAAE,CAAC,WAAW,IAAK,CAAA;AAEpB,MAAI,sBAAsB;AAC1B,MAAI,oBAAoB,KAAK,SAAS;AAEtC,MAAI,sBAAsB;AACxB,UAAM,oBAAoB;AAC1B,UAAM,qBAAqB,WAAW,SAAA;AACtC,UAAM,mBAAmB,WAAW,YAAY,YAAA;AAChD,0BAAsB,IAAI,GAAG,qBAAqB,iBAAA;AAClD,wBAAoB,IAAI,KAAK,SAAS,GAAG,mBAAmB,iBAAA;EAC7D;AAED,SAAO;IACL;IACA;IACA;IACA;IACA;IACA;IACA;EACD;AACF;ACvFD,IAAMG,kBAAe;AAMrB,IAAMC,2BAAAA,yBAAoDD,eAAAA;AAE1D,SAASE,KAAY,EACnB3D,QACA4D,SACAC,gBACAC,eACA9G,KAAAA,OACA+G,QACAC,WACAC,SACAC,eACAC,eACAC,aACAC,YACAC,OACA,GAAGnG,MAAAA,GACwB;AAC3B,QAAM,EAAEgB,UAAUoF,eAAeC,QAAAA,IAAYC,kBAAkBZ,cAAAA;AAE/D,QAAM,EAAEa,UAAAA,IAAc1E;AACtBgE,cAAYW,iBACV3E,QACA,EAAA,CACG0D,wBAAAA,GAA2BI,cAC7B,GAAA,OACMY,cAAc,aAAaA,UAAU1H,KAAAA,IAAO0H,WACnDV,SAAAA;AAEF,QAAMY,aAAaC,mBAAmB7E,QAAQhD,KAAAA;AAE9C,WAAS8H,kBAAkBC,YAAsB;AAC/CV,eAAW;MAAEN;MAAQnH,KAAKoD,OAAOpD;IAAK,GAAEmI,UAAAA;EAC1C;AAEA,WAASC,YAAYC,OAAyC;AAC5D,QAAIhB,SAAS;AACX,YAAMiB,YAAYC,gBAAgBF,KAAAA;AAClChB,cAAQ;QAAEF;QAAQ/G,KAAAA;QAAKgD;QAAQqE,YAAYS;MAAmB,GAAEI,SAAAA;AAChE,UAAIA,UAAUE,uBAAAA,EAA0B;IAC1C;AACAN,sBAAAA;EACF;AAEA,WAASO,kBAAkBJ,OAAyC;AAClE,QAAId,eAAe;AACjB,YAAMe,YAAYC,gBAAgBF,KAAAA;AAClCd,oBAAc;QAAEJ;QAAQ/G,KAAAA;QAAKgD;QAAQqE,YAAYS;MAAmB,GAAEI,SAAAA;AACtE,UAAIA,UAAUE,uBAAAA,EAA0B;IAC1C;AACAN,sBAAAA;EACF;AAEA,WAASQ,kBAAkBL,OAAyC;AAClE,QAAIf,eAAe;AACjB,YAAMgB,YAAYC,gBAAgBF,KAAAA;AAClCf,oBAAc;QAAEH;QAAQ/G,KAAAA;QAAKgD;QAAQqE,YAAYS;MAAmB,GAAEI,SAAAA;AACtE,UAAIA,UAAUE,uBAAAA,EAA0B;IAC1C;AACAN,sBAAkB,IAAA;EACpB;AAEA,WAASS,gBAAgBC,QAAW;AAClCpB,gBAAYpE,QAAQwF,MAAAA;EACtB;AAEA,aACE;IAAC;;;MACC,MAAK;MACL,iBAAexF,OAAOpD,MAAM;MAC5B,gBAAcgH;MACd,iBAAeC;MACf,iBAAA,CAAgBe,cAAAA;MACNzF;MACC6E;MACX,OAAO;QACL,GAAGyB,aAAazF,QAAQ4D,OAAAA;QACxB,GAAGU;MACJ;MACD,SAASU;MACT,eAAeM;MACf,eAAeD;MACNb;MACT,GAAIrG;gBAEH6B,OAAO0F,WAAW;QACjB1F;QACAhD,KAAAA;QACA+G;QACA4B,gBAAgBf;QAChBzF,UAAUoF;QACVH,aAAamB;MACd,CAAA;;;AAGP;AAEA,IAAMK,oBAAgBC,mBAAKlC,IAAAA;mBAEZiC;AAER,SAASnF,kBAAyB9D,KAAgBwB,OAAiC;AACxF,aAAO,wBAAC,eAAA,EAAwB,GAAIA,MAAAA,GAATxB,GAAAA;AAC7B;AC7GA,IAAMmJ,iBAAc;AAkBpB,IAAMC,gCAA6B;AAOnC,IAAMC,0BAAAA,wBAAkDF,cAAAA;AAiBzC,SAASG,WAAkB,EACxCC,cACAC,MACAnG,QACAoG,aACAC,WACAC,WACAC,kBACAC,yBACAb,gBACAc,cACAC,QACAzC,SACA0C,aACAC,qBAAAA,GACe;AACf,QAAM,EAAEhK,KAAKmH,OAAAA,IAAWwC;AAExB,WAASM,gBAAgB5B,OAAyC;AAEhEA,UAAM6B,eAAAA;AACN,QAAI7B,MAAM8B,YAAY,EAAG;AACzBJ,gBAAY,IAAA;AACZK,WAAOC,iBAAiB,aAAaC,WAAAA;AACrCF,WAAOC,iBAAiB,WAAWE,SAAAA;AAEnC,aAASD,YAAYjC,SAAmB;AAItC,UAAIA,QAAM8B,YAAY,EAAGI,WAAAA;IAC3B;AAEA,aAASA,YAAY;AACnBH,aAAOI,oBAAoB,aAAaF,WAAAA;AACxCF,aAAOI,oBAAoB,WAAWD,SAAAA;AACtCR,kBAAY,KAAA;AACZU,oBAAAA;IACF;EACF;AAEA,WAASA,gBAAgB;AACvB,UAAMC,aAAad,wBAAwBe;AAC3C,QAAID,eAAAA,OAA0B;AAE9B,UAAME,gBAAgBzD,SAASuD,aAAavD,SAAS,IAAIuD;AACzD,UAAMG,cAAc1D,SAASuD,aAAaA,aAAa,IAAIvD;AAC3D2D,eAAWF,eAAeC,WAAAA;AAC1Bb,yBAAAA,MAAAA;EACF;AAEA,WAAStB,kBAAkBL,OAAyC;AAClEA,UAAM0C,gBAAAA;AACND,eAAW3D,SAAS,GAAGoC,KAAKyB,MAAAA;EAC9B;AAEA,WAASF,WAAWG,aAAqBC,WAAmB;AAC1D,UAAMC,YAAY5B,KAAKpC,MAAAA;AACvB,UAAMiE,cAAc,CAAC,GAAG7B,IAAK;AAC7B,UAAM8B,UAAoB,CAAE;AAC5B,aAASC,IAAIL,aAAaK,IAAIJ,WAAWI,IACvC,KAAIvC,eAAe;MAAE5B,QAAQmE;MAAGtL;IAAK,CAAA,GAAG;AACtC,YAAMuL,aAAazB,OAAO;QAAE0B,WAAWpI,OAAOrD;QAAKoL;QAAWM,WAAWlC,KAAK+B,CAAAA;MAAI,CAAA;AAClF,UAAIC,eAAehC,KAAK+B,CAAAA,GAAI;AAC1BF,oBAAYE,CAAAA,IAAKC;AACjBF,gBAAQK,KAAKJ,CAAAA;MACf;IACF;AAGF,QAAID,QAAQL,SAAS,EACnBnB,8CAAeuB,aAAa;MAAEC;MAASjI;IAAQ;EAEnD;AAEA,WAASuI,WAAgC;;AACvC,UAAM3E,YAAU5D,YAAO4D,YAAP5D,gCAAiB;MAAEwI,MAAM;MAAOxL,KAAKmJ,KAAKpC,MAAAA;IAAS,OAAK;AACxE,UAAM,EAAE0E,kBAAkB,GAAGnE,MAAAA,IAAUmB,aAAazF,QAAQ4D,OAAAA;AAC5D,UAAM8E,YAAY;AAClB,UAAMC,eAAe3I,OAAOpD,MAAMgH,UAAU,MAAMyC;AAElD,WAAO;MACL,GAAG/B;MACH4B;MACA0C,iBAAiBD,eAAAA,SAA2BD;MAC5CG,gBAAgBvC,YAAAA,SAAwBoC;MACxCD,kBAAkBA,mBAAAA,QACNA,gBAAAA,MAAsBrC,WAAAA,mDAAW;IAE9C;EACH;AAEA,aACE,wBAAC,OAAA;IACC,OAAOmC,SAAAA;IACP,WAAWO,aAAK9C,yBAAyBhG,OAAO+I,UAAUhD,6BAAAA;IACjD9B;IACT,aAAa4C;IACb,eAAevB;;AAGrB;ACxHA,IAAM0D,cAAW;AAkBF,SAASC,SAAgB,EACtCjJ,QACA4D,SACA5G,KAAAA,OACA+G,QACAK,aACA8E,aACAC,WACAC,SAAAA,GACuB;;AACvB,QAAMC,sBAAkBC,qBAAAA,MAAAA;AACxB,QAAMC,yBAAuBvJ,YAAOwJ,kBAAPxJ,mBAAsBuJ,yBAAwB;AAK3E,QAAME,2BAA2BC,cAAc,MAAM;AACnDC,YAAQ,MAAM,KAAA;EACf,CAAA;AAEDC,8BAAU,MAAM;AACd,QAAA,CAAKL,qBAAsB;AAE3B,aAASM,2BAA2B;AAClCR,sBAAgB9B,UAAUuC,sBAAsBL,wBAAAA;IAClD;AAEAxC,qBAAiB,aAAa4C,0BAA0B,EAAEE,SAAS,KAAM,CAAA;AAEzE,WAAO,MAAM;AACX3C,0BAAoB,aAAayC,0BAA0B,EAAEE,SAAS,KAAM,CAAA;AAC5EC,yBAAAA;IACD;EACF,GAAE,CAACT,sBAAsBE,wBAAyB,CAAA;AAEnD,WAASO,qBAAqB;AAC5BC,yBAAqBZ,gBAAgB9B,OAAAA;EACvC;AAEA,WAASlI,cAAc4F,OAA4C;AACjE,QAAIkE,WAAW;AACb,YAAMjE,YAAYC,gBAAgBF,KAAAA;AAClCkE,gBACE;QACEe,MAAM;QACNlN,KAAAA;QACAgD;QACA+D;QACAqF,WAAW;AACTA,mBAASnE,KAAAA;QACV;QACD0E;MACD,GACDzE,SAAAA;AAEF,UAAIA,UAAUE,uBAAAA,EAA0B;IAC1C;AAEA,QAAIH,MAAMtI,QAAQ,SAEhBgN,SAAAA;aACS1E,MAAMtI,QAAQ,QACvBgN,SAAQ,IAAA;aACCQ,mBAAmBlF,KAAAA,EAC5BmE,UAASnE,KAAAA;EAEb;AAEA,WAAS0E,QAAQS,gBAAgB,OAAOC,kBAAkB,MAAM;AAC9D,QAAID,cACFhG,aAAYpH,OAAK,MAAMqN,eAAAA;QAEvBnB,aAAYmB,eAAAA;EAEhB;AAEA,WAASC,kBAAkBtN,OAAQuN,wBAAwB,OAAO;AAChEnG,gBAAYpH,OAAKuN,uBAAuBA,qBAAAA;EAC1C;AAEA,QAAM,EAAE7F,UAAAA,IAAc1E;AACtB,QAAMgE,YAAYW,iBAChB3E,QACA,wBAAA,GACCA,YAAOwJ,kBAAPxJ,mBAAsBwK,uBAAsBxB,aAAAA,OACtCtE,cAAc,aAAaA,UAAU1H,KAAAA,IAAO0H,SAAAA;AAGrD,aACE;IAAC;;;MACC,MAAK;MACL,iBAAe1E,OAAOpD,MAAM;MAC5B,gBAAcgH;MACd,iBAAA;MACWI;MACX,OAAOyB,aAAazF,QAAQ4D,OAAAA;MAC5B,WAAWvE;MACX,oBAAoB2K;gBAEnBhK,OAAOyK,kBAAkB,YACxB,yBAAA,6BAAA,EAAA,UAAA,CACGzK,OAAOyK,eAAe;QACrBzK;QACAhD,KAAAA;QACA+G;QACAK,aAAakG;QACbX;MACD,CAAA,KACA3J,YAAOwJ,kBAAPxJ,mBAAsBwK,uBACrBxK,OAAO0F,WAAW;QAChB1F;QACAhD,KAAAA;QACA+G;QACA4B,gBAAgB;QAChBxG,UAAU;QACViF,aAAakG;MACd,CAAA,CAAC,EAAA,CAAA;;;AAKd;ACvJe,SAAS,wBAA+B,EACrD,QACA,QACA,gBACA,WAAA,GACsC;AACtC,QAAM,EAAE,UAAU,QAAA,IAAY,kBAAkB,cAAA;AAChD,QAAM,EAAE,QAAA,IAAY;AACpB,QAAM,UAAU,qBAAqB,QAAQ,MAAA;AAC7C,QAAM,QAAQ,OAAO,MAAM;AAE3B,WAAS,UAAU;AACjB,eAAW;MAAE,KAAK,OAAO;MAAK;IAAQ,CAAA;EACvC;AAED,aACE,wBAAC,OAAA;IACC,MAAK;IACL,iBAAe;IACf,gBAAc;IACd,gBAAc;IACd,iBAAe;IACL;IACV,WAAW,aAAK,eAAe,OAAO,eAAA;IACtC,OAAO;MACL,GAAG,mBAAmB,QAAQ,QAAQ,OAAA;MACtC,iBAAiB;MACjB,eAAe,QAAQ;IACxB;IACQ;IACA;cAER,OAAO;;AAGb;ACpCD,IAAMI,wBAAqB;AAM3B,IAAMC,gBAAa;AAMnB,IAAMC,yBAAAA,sBAA+CD,aAAAA;IAExCE,wBAAqB;AAWlC,IAAMC,yBAAyB;AAE/B,IAAMC,eAAY;AAIlB,IAAMC,wBAAAA,qBAA6CD,YAAAA;AAEnD,IAAME,WAAQ;AAId,IAAMC,oBAAAA,sBAA0CD,QAAAA;AAqBjC,SAASE,WAAkB,EACxCnL,QACA4D,SACAG,QACAF,gBACAuH,gBACAC,kBACAC,aACAC,qBACAlH,YACAmH,iBACAC,WACAC,YAAAA,GACyB;AACzB,QAAM,CAACC,YAAYC,aAAAA,QAAiBC,uBAAS,KAAA;AAC7C,QAAM,CAACC,QAAQC,SAAAA,QAAaF,uBAAS,KAAA;AACrC,QAAMG,UAAUC,qBAAqBjM,QAAQ+D,MAAAA;AAC7C,QAAM,EAAE5E,UAAUoF,eAAeC,QAAAA,IAAYC,kBAAkBZ,cAAAA;AAC/D,QAAMqI,YAAYZ,2CAAaa,UAAWC,CAAAA,SAASA,KAAKhE,cAAcpI,OAAOrD;AAC7E,QAAM0P,aACJH,cAAAA,UAA2BA,YAAY,KAAKZ,YAAaY,SAAAA,IAAAA;AAC3D,QAAMjM,gBAAgBoM,yCAAYZ;AAClC,QAAMvL,WAAWmM,eAAAA,UAA4Bf,YAAa1D,SAAS,IAAIsE,YAAa,IAAA;AACpF,QAAMI,WACJrM,iBAAAA,CAAkBC,WAAYD,kBAAkB,QAAQ,cAAc,eAAA;AACxE,QAAM,EAAEE,UAAUoM,WAAWC,UAAAA,IAAcxM;AAE3C,QAAMgE,YAAYW,iBAAiB3E,QAAQA,OAAOyM,iBAAiB;KAChE/B,qBAAAA,GAAwBvK;KACxByK,sBAAAA,GAAyB2B;KACzBzB,sBAAAA,GAAyB0B;KACzBxB,qBAAAA,GAAwBW;KACxBT,iBAAAA,GAAoBY;EACtB,CAAA;AAED,WAASY,OAAOC,WAAoB;AAClC,QAAIpB,uBAAuB,KAAM;AACjC,UAAM,EAAEqB,oBAAAA,IAAwB5M;AAChC,QAAIqM,eAAAA,QAA0B;AAE5B,YAAMQ,WAAuB;QAC3BzE,WAAWpI,OAAOrD;QAClB8O,WAAWmB,sBAAsB,SAAS;MAC3C;AACDrB,0BAAoBD,eAAeqB,YAAY,CAAC,GAAGrB,aAAauB,QAAS,IAAG,CAACA,QAAS,CAAA;IACvF,OAAM;AACL,UAAIC;AACJ,UACGF,wBAAwB,QAAQ3M,kBAAkB,UAClD2M,wBAAwB,QAAQ3M,kBAAkB,MAEnD6M,kBAAiB;QACf1E,WAAWpI,OAAOrD;QAClB8O,WAAWxL,kBAAkB,QAAQ,SAAS;MAC/C;AAEH,UAAI0M,WAAW;AACb,cAAMI,kBAAkB,CAAC,GAAGzB,WAAa;AACzC,YAAIwB,eAEFC,iBAAgBb,SAAAA,IAAcY;YAG9BC,iBAAgBC,OAAOd,WAAY,CAAA;AAErCX,4BAAoBwB,eAAAA;MACrB,MACCxB,qBAAoBuB,iBAAiB,CAACA,cAAe,IAAG,CAAE,CAAA;IAE9D;EACF;AAEA,WAAS7I,QAAQgB,OAA0C;AACzDZ,eAAW;MAAEzH,KAAKoD,OAAOpD;MAAKmH;IAAQ,CAAA;AAEtC,QAAI5D,SACFuM,QAAOzH,MAAMgI,WAAWhI,MAAMiI,OAAAA;EAElC;AAEA,WAASC,YAAYlI,OAAyC;AAC5DT,uCAAUS;AACV,QAAIuG,gBAEFnH,YAAW;MAAEzH,KAAK;MAAGmH;IAAQ,CAAA;EAEjC;AAEA,WAASoF,UAAUlE,OAA6C;AAC9D,UAAM,EAAEtI,IAAAA,IAAQsI;AAChB,QAAI9E,aAAaxD,QAAQ,OAAOA,QAAQ,UAAU;AAEhDsI,YAAM6B,eAAAA;AACN4F,aAAOzH,MAAMgI,WAAWhI,MAAMiI,OAAAA;IAC/B,WACCX,aACAa,kBAAkBnI,KAAAA,MACjBtI,QAAQ,eAAeA,QAAQ,eAChC;AAGAsI,YAAM0C,gBAAAA;AACN,YAAM,EAAE0F,MAAAA,IAAUpI,MAAMqI,cAAcC,sBAAAA;AACtC,YAAM,EAAEC,QAAAA,IAAYC,gBAAgBhC,SAAAA;AACpC,YAAMiC,SAAS/Q,QAAQ6Q,UAAU,MAAM;AACvC,YAAMG,WAAWC,iBAAiBP,QAAQK,QAAQ1N,MAAAA;AAClD,UAAI2N,aAAaN,MACfjC,gBAAepL,QAAQ2N,QAAAA;IAE3B;EACF;AAEA,WAASE,YAAY5I,OAAwC;AAC3DA,UAAM6I,aAAaC,QAAQrC,aAAa1L,OAAOrD,GAAAA;AAC/CsI,UAAM6I,aAAaE,aAAa;AAChCpC,kBAAc,IAAA;EAChB;AAEA,WAASqC,YAAY;AACnBrC,kBAAc,KAAA;EAChB;AAEA,WAASsC,WAAWjJ,OAAwC;AAE1DA,UAAM6B,eAAAA;AACN7B,UAAM6I,aAAaE,aAAa;EAClC;AAEA,WAASG,OAAOlJ,OAAwC;AACtD8G,cAAU,KAAA;AAKV,QAAI9G,MAAM6I,aAAaM,MAAMC,SAAS3C,YAAY4C,YAAAA,CAAa,GAAG;AAChE,YAAMC,YAAYtJ,MAAM6I,aAAaU,QAAQ9C,YAAY4C,YAAAA,CAAa;AACtE,UAAIC,cAAcvO,OAAOrD,KAAK;AAE5BsI,cAAM6B,eAAAA;AACNuE,6DAAmBkD,WAAWvO,OAAOrD;MACvC;IACF;EACF;AAEA,WAAS8R,YAAYxJ,OAAwC;AAC3D,QAAIyJ,iBAAiBzJ,KAAAA,EACnB8G,WAAU,IAAA;EAEd;AAEA,WAAS4C,YAAY1J,OAAwC;AAC3D,QAAIyJ,iBAAiBzJ,KAAAA,EACnB8G,WAAU,KAAA;EAEd;AAEA,MAAI6C;AACJ,MAAIpC,UACFoC,kBAAiB;IACfpC,WAAW;IAEXqB;IACAI;IAEAC;IACAO;IACAE;IACAR;EACD;AAGH,aACE,yBAAC,OAAA;IACC,MAAK;IACL,iBAAenO,OAAOpD,MAAM;IAC5B,gBAAcgH;IACd,gBAAcoI;IACd,iBAAenI;IACf,aAAWyI;IAEX,UAAUd,kBAAkB,IAAIrM;IACrB6E;IACX,OAAO;MACL,GAAG6K,mBAAmB7O,QAAQ+D,QAAQiI,OAAAA;MACtC,GAAGvG,aAAazF,QAAQ4D,OAAAA;IACzB;IACD,SAASuJ;IACAlJ;IACEkF;IACX,GAAIyF;eAEH5O,OAAOD,iBAAiB;MACvBC;MACAC;MACAC;MACAf,UAAUoF;IACX,CAAA,GAEAgI,iBACC,wBAAC,cAAA;MAAqBvM;MAAwBoL;MAA2BK;MAC1E;;AAGP;AAOA,SAASqD,aAAoB,EAAE9O,QAAQoL,gBAAgBK,UAAAA,GAAuC;AAC5F,QAAMsD,wBAAoBzF,qBAAAA,MAAAA;AAC1B,QAAM0F,QAAQvD,cAAc;AAE5B,WAASwD,cAAchK,OAA2C;AAChE,QAAIA,MAAMiK,gBAAgB,WAAWjK,MAAM8B,YAAY,EACrD;AAIF9B,UAAM6B,eAAAA;AAEN,UAAM,EAAEwG,eAAe6B,UAAAA,IAAclK;AACrCqI,kBAAc8B,kBAAkBD,SAAAA;AAChC,UAAME,aAAa/B,cAAcgC;AACjC,UAAM,EAAEC,OAAOC,KAAAA,IAASH,WAAW9B,sBAAAA;AACnCwB,sBAAkBxH,UAAUyH,QAAQ/J,MAAMwK,UAAUD,OAAOD,QAAQtK,MAAMwK;EAC3E;AAEA,WAASC,cAAczK,OAA2C;AAChE,UAAMyI,SAASqB,kBAAkBxH;AACjC,QAAImG,WAAAA,OAAsB;AAC1B,UAAM,EAAEL,OAAOkC,OAAOC,KAAAA,IAASvK,MAAMqI,cAAcgC,cAAe/B,sBAAAA;AAClE,QAAII,WAAWqB,QAAQO,QAAQ7B,SAASzI,MAAMwK,UAAUxK,MAAMwK,UAAU/B,SAAS8B;AACjF7B,eAAWC,iBAAiBD,UAAU3N,MAAAA;AACtC,QAAIqN,QAAQ,KAAKM,aAAaN,MAC5BjC,gBAAepL,QAAQ2N,QAAAA;EAE3B;AAEA,WAASgC,uBAAuB;AAC9BZ,sBAAkBxH,UAAAA;EACpB;AAEA,WAASrD,gBAAgB;AACvBkH,mBAAepL,QAAQ,aAAA;EACzB;AAEA,aACE,wBAAC,OAAA;IACC,WAAW6K;IACX,SAASlD;IACMsH;IACAS;IAGOC;IACPzL;;AAGrB;AAKA,SAASwK,iBAAiBzJ,OAAwB;AAChD,QAAM2K,gBAAgB3K,MAAM2K;AAE5B,SAAA,CAAQ3K,MAAMqI,cAAcuC,SAASD,aAAAA;AACvC;ICtVa5S,MAAG;IAmBH8S,eAAAA,WAA0B9S,GAAAA;IAE1B+S,cAAW;IAOXC,uBAAuB;IAEvBC,4BAAyB;IAazBC,yBAAyB;IAEzBC,4BAA4B;ACnBzC,IAAMC,YAAS;IAkBFC,qBAAAA,kBAAuCD,SAAAA;AAEpD,SAASE,UAAsC,EAC7CC,gBACAxM,QACAyM,SACApF,gBACAC,kBACAC,aACAC,qBACA7K,uBACA+P,iBACApM,YACAmH,iBACAC,UAAAA,GAC2B;AAC3B,QAAMC,kBAAcgF,oBAAAA;AAEpB,QAAMC,QAAQ,CAAE;AAChB,WAASC,QAAQ,GAAGA,QAAQJ,QAAQ5I,QAAQgJ,SAAS;AACnD,UAAM5Q,SAASwQ,QAAQI,KAAAA;AACvB,UAAMhN,UAAUiN,WAAW7Q,QAAQU,uBAAuB,EAAE8H,MAAM,SAAU,CAAA;AAC5E,QAAI5E,YAAAA,OACFgN,UAAShN,UAAU;AAGrB+M,UAAMrI,SACJ,wBAAC,YAAA;MAEStI;MACC4D;MACDG;MACR,gBAAgB0M,oBAAoBzQ,OAAOpD;MAC3BwO;MACEC;MACGE;MACRD;MACDjH;MACZ,iBAAiBmH,mBAAmBoF,UAAU;MACnCnF;MACEC;OAZR1L,OAAOrD,GAAAA,CAchB;EACF;AAEA,aACE,wBAAC,OAAA;IACC,MAAK;IACL,iBAAeoH;IACf,WAAW+E,aACTuH,oBACA,EAAA,CACGL,oBAAAA,GAAuBS,oBAAoB,GAC7C,GACDF,cAAAA;cAGDI;;AAGP;4BAEe9K,mBAAKyK,SAAAA;AC9FpB,SAAS,uBAA8B,EACrC,QACA,OACA,SACA,iBACA,WAAA,GACqC;AACrC,QAAM,QAAQ,CAAE;AAChB,QAAM,kBAAkB,oBAAI,IAAA;AAE5B,aAAW,UAAU,SAAS;AAC5B,QAAI,EAAE,OAAA,IAAW;AAEjB,QAAI,WAAA,OAAsB;AAE1B,WAAO,OAAO,QAAQ,OAAO;AAC3B,UAAI,OAAO,WAAA,OAAsB;AACjC,eAAS,OAAO;IACjB;AAED,QAAI,OAAO,UAAU,SAAA,CAAU,gBAAgB,IAAI,MAAA,GAAS;AAC1D,sBAAgB,IAAI,MAAA;AACpB,YAAM,EAAE,IAAA,IAAQ;AAChB,YAAM,SACJ;QAAC;;;UAEC,QAAQ;UACA;UACR,gBAAgB,oBAAoB;UACxB;;QAJP;OAKL;IAEL;EACF;AAED,aACE,wBAAC,OAAA;IACC,MAAK;IACL,iBAAe;IACf,WAAW;cAEV;;AAGN;yCAEc,mBAAK,sBAAA;ACnDpB,SAAS,IAAW,EAClB,WACA,QACA,cACA,iBACA,wBACA,eACA,oBACA,uBACA,KAAA,OACA,iBACA,oBACA,aACA,mBACA,mBACA,UACA,sBACA,cACA,aACA,YACA,GAAG,MAAA,GACqB;AACxB,QAAM,aAAa,oBAAA,EAA8B;AAEjD,QAAM,kBAAkB,cAAc,CAACzU,QAAiCiV,WAAc;AACpF,gBAAY,QAAQ,QAAQ,MAAA;EAC7B,CAAA;AAED,WAAS,gBAAgBC,OAAyC;AAChE,iEAAuB;AACvB,iDAAe;EAChB;AAED,cAAY,aACV,cAAA,WACW,SAAS,MAAM,IAAI,SAAS,KAAA,IACvC,EAAA,CACG,oBAAA,GAAuB,oBAAoB,GAC7C,GACD,qCAAW/T,OAAK,SAChB,SAAA;AAGF,QAAM,QAAQ,CAAE;AAEhB,WAAS,QAAQ,GAAG,QAAQ,gBAAgB,QAAQ,SAAS;AAC3D,UAAM,SAAS,gBAAgB,KAAA;AAC/B,UAAM,EAAE,IAAA,IAAQ;AAChB,UAAM,UAAU,WAAW,QAAQ,uBAAuB;MAAE,MAAM;MAAO,KAAA;IAAK,CAAA;AAC9E,QAAI,YAAA,OACF,UAAS,UAAU;AAGrB,UAAM,iBAAiB,oBAAoB;AAE3C,QAAI,kBAAkB,mBACpB,OAAM,KAAK,kBAAA;QAEX,OAAM,KACJ,WAAW,OAAO,KAAK;MACrB;MACA;MACA,KAAA;MACA;MACA,eAAe,uBAAuB;MACtC;MACA,SAAS;MACT,eAAe;MACf,eAAe;MACf,aAAa;MACb;IACD,CAAA,CAAC;EAGP;AAED,QAAM,qBAAiB,sBACrB,OAAiC;IAAE;IAAe;EAAwB,IAC1E,CAAC,wBAAwB,aAAc,CAAA;AAGzC,aACE,wBAAC,qBAAA;IAAoB,OAAO;kBAC1B,wBAAC,OAAA;MACC,MAAK;MACM;MACX,cAAc;MACd,OAAO,YAAY,YAAA;MACnB,GAAI;gBAEH;;;AAIR;AAED,IAAM,mBAAe,mBAAK,GAAA;kBAEX;AAER,SAAS,iBAAwBgU,KAAgBC,OAA8B;AACpF,aAAO,wBAAC,cAAA,EAAuB,GAAI,MAAA,GAAT,GAAA;AAC3B;ACtGc,SAAS,aAAa,EACnC,kBAAkB,EAAE,KAAK,OAAA,GACzB,SACA,wBAAA,GAKC;AACD,QAAM,UAAM,qBAAuB,IAAA;AAEnC,oCAAgB,MAAM;AAGpB,mBAAe,IAAI,OAAA;EACpB,CAAA;AAED,oCAAgB,MAAM;AACpB,aAAS,qBAAqB;AAC5B,8BAAwB,IAAA;IACzB;AAED,UAAM,WAAW,IAAI,qBAAqB,oBAAoB;MAC5D,MAAM,QAAQ;MACd,WAAW;IACZ,CAAA;AAED,aAAS,QAAQ,IAAI,OAAA;AAErB,WAAO,MAAM;AACX,eAAS,WAAA;IACV;EACF,GAAE,CAAC,SAAS,uBAAwB,CAAA;AAErC,aACE,wBAAC,OAAA;IACM;IACL,OAAO;MACL,YAAY,QAAA,SAAoB,SAAS,MAAM;MAC/C,SAAS,WAAA,SAAuB,SAAS,SAAS;IACnD;;AAGN;AChDD,IAAMC,QAAK;AAUX,IAAMC,iBAAAA,kBAAmCD,KAAAA;AAE1B,SAAS3Q,iBAAiB,EAAEN,eAAeC,SAAAA,GAAmC;AAC3F,aACE,yBAAA,6BAAA,EAAA,UAAA,CACGkR,eAAe,EAAEnR,cAAe,CAAA,GAChCoR,mBAAmB,EAAEnR,SAAU,CAAA,CAAC,EAAA,CAAA;AAGvC;AAEO,SAASkR,eAAe,EAAEnR,cAAAA,GAAsC;AACrE,MAAIA,kBAAAA,OAA6B,QAAO;AAExC,aACE,wBAAC,OAAA;IAAI,SAAQ;IAAW,OAAM;IAAK,QAAO;IAAI,WAAWkR;IAAgB,eAAA;kBACvE,wBAAC,QAAA,EAAK,GAAGlR,kBAAkB,QAAQ,kBAAkB,gBAAA,CAAA;;AAG3D;AAEO,SAASoR,mBAAmB,EAAEnR,SAAAA,GAAqC;AACxE,SAAOA;AACT;ACJA,IAAMoR,OAAI;IAyEGC,gBAAAA,OAAuBD,IAAAA;AAEpC,IAAME,mBAAgB;IAUTC,4BAAAA,yBAAqDD,gBAAAA;IAErDE,qBAAkB;IASlBC,qCAAkC;IC1HlCC,uBAAoB;AAgBjC,SAASC,YAAmB,EAC1B7R,QACA4D,SACA5G,KAAAA,OACA+G,QACAF,gBACAQ,WAAAA,GAC0B;;AAC1B,QAAM,EAAElF,UAAUoF,eAAeC,QAAAA,IAAYC,kBAAkBZ,cAAAA;AAC/D,QAAM,EAAEiO,iBAAAA,IAAqB9R;AAC7B,QAAMgE,YAAYW,iBAChB3E,QACA4R,sBAAAA,OACOE,qBAAqB,aAAaA,iBAAiB9U,KAAAA,IAAO8U,gBAAAA;AAGnE,WAAS7N,UAAU;AACjBI,eAAW;MAAEN;MAAQnH,KAAKoD,OAAOpD;IAAK,CAAA;EACxC;AAEA,aACE,wBAAC,OAAA;IACC,MAAK;IACL,iBAAeoD,OAAOpD,MAAM;IAC5B,gBAAcgH;IACd,iBAAeC;IACL1E;IACC6E;IACX,OAAOyB,aAAazF,QAAQ4D,OAAAA;IACnBK;IACAO;eAERxE,YAAO+R,sBAAP/R,gCAA2B;MAAEA;MAAQhD,KAAAA;MAAKmC,UAAUoF;IAAe;;AAG1E;8BAEesB,mBAAKgM,WAAAA;AC9BpB,IAAMG,aAAU;AAQhB,IAAMC,gBAAa;AAYnB,IAAMC,sBAAAA,mBAAyCF,UAAAA;AAE/C,SAASG,WAAkB,EACzBpO,QACAmC,cACAlJ,KAAAA,OACAP,iBACA2V,KACAC,QACA3R,uBACA+P,iBACA6B,OACAjO,YACA,iBAAiBkO,aAAAA,GACQ;AACzB,QAAM5B,QAAQ,CAAE;AAChB,WAASC,QAAQ,GAAGA,QAAQnU,gBAAgBmL,QAAQgJ,SAAS;AAC3D,UAAM5Q,SAASvD,gBAAgBmU,KAAAA;AAC/B,UAAMhN,UAAUiN,WAAW7Q,QAAQU,uBAAuB;MAAE8H,MAAM;MAAWxL,KAAAA;IAAK,CAAA;AAClF,QAAI4G,YAAAA,OACFgN,UAAShN,UAAU;AAGrB,UAAMC,iBAAiB4M,oBAAoBzQ,OAAOpD;AAElD+T,UAAMrI,SACJ,wBAAC,qBAAA;MAEStI;MACC4D;MACT,KAAK5G;MACG+G;MACQF;MACJQ;OANPrE,OAAOrD,GAAAA,CAQhB;EACF;AAEA,aACE,wBAAC,OAAA;IACC,MAAK;IACL,iBAAe4V;IACf,WAAWzJ,aACTgH,cAAAA,WACW/L,SAAS,MAAM,IAAI,SAAS,KAAA,IACvCmO,qBACA;OACGlC,oBAAAA,GAAuBS,oBAAoB;UACxCP,sBAAAA,IAA0B+B,aAAAA,EAAa,GAAKK;OAC/CnC,yBAAAA,GAAAA,CAA6BmC;IAElC,CAAA;IACA,OACE;MACE,GAAGE,YAAYtM,YAAAA;MACf,yBAAyBkM,QAAAA,SAAAA,GAAuBA,GAAAA,OAAG;MACnD,4BAA4BC,WAAAA,SAAAA,GAA0BA,MAAAA,OAAM;IAC7D;cAGF1B;;AAGP;6BAEe9K,mBAAKsM,UAAAA;ACmIb,SAAS,SAA+CM,OAAgC;AAC7F,QAAM,EACJ,KAEA,SAAS,YACT,MACA,gBACA,mBACA,cACA,cAEA,WAAW,cACX,iBAAiB,oBACjB,kBAAkB,qBAElB,cACA,wBACA,sBACA,aACA,qBACA,sBAEA,aACA,mBACA,mBACA,eACA,sBACA,UACA,gBACA,kBACA,QACA,YACA,aAEA,sBAAsB,yBAEtB,WACA,WACA,OACA,UACA,gBACA,WAAW,cAEX,MAAM,SACN,cAAc,WACd,mBAAmB,gBACnB,oBAAoB,iBACpB,oBAAoB,iBACpB,iBAAiB,iBACjB,eAAe,QACf,WAAW,OAAA,IACT;AAKJ,QAAM,mBAAmB,oBAAA;AACzB,QAAM,OAAO,WAAW;AACxB,QAAM,YAAY,gBAAgB;AAClC,QAAM,kBAAkB,uBAAA,OAA8B,cAAc,WAAW,YAAY;AAC3F,QAAM,mBAAmB,wBAAA,OAA+B,cAAc,WAAW,YAAY;AAC7F,QAAM,aAAY,uCAAW,eAAa,qDAAkB,cAAa;AACzE,QAAM,cAAa,uCAAW,gBAAc,qDAAkB,eAAc;AAC5E,QAAMlS,sBACJ,uCAAW,sBAAoB,qDAAkB,qBAAoBmS;AACvE,QAAM1U,oBACJ,uCAAW,oBAAkB,qDAAkB,mBAAkB2U;AACnE,QAAM,kBAAiB,uCAAW,oBAAkB,qDAAkB;AACtE,QAAM,uBAAuB,2BAA2B;AACxD,QAAM,YAAY,gBAAgB;AAKlC,QAAM,CAAC,WAAW,YAAA,QAAgB,uBAAS,CAAA;AAC3C,QAAM,CAAC,YAAY,aAAA,QAAiB,uBAAS,CAAA;AAC7C,QAAM,CAAC,qBAAqB,sBAAA,QAA0B,uBACpD,MAAmC,oBAAI,IAAA,CAAA;AAEzC,QAAM,CAAC,sBAAsB,uBAAA,QAA2B,uBACtD,MAAmC,oBAAI,IAAA,CAAA;AAEzC,QAAM,CAAC,YAAY,WAAA,QAAe,uBAAS,KAAA;AAC3C,QAAM,CAAC,mBAAmB,aAAA,QAAiB,uBAAA,MAAA;AAC3C,QAAM,CAAC,kBAAkB,mBAAA,QAAuB,uBAAiC,IAAA;AACjF,QAAM,CAAC,iBAAiB,kBAAA,QAAsB,uBAAS,KAAA;AACvD,QAAM,CAAC,gBAAgB,iBAAA,QAAqB,uBAAS,EAAA;AAErD,QAAM,qBAAiB,0BACrB,CAAC9W,WAAoC;AACnC,WACE,oBAAoB,IAAI,OAAO,GAAA,KAAQ,qBAAqB,IAAI,OAAO,GAAA,KAAQ,OAAO;EAEzF,GACD,CAAC,sBAAsB,mBAAoB,CAAA;AAG7C,QAAM,CAAC,SAAS,WAAW,YAAY,yBAAA,IAA6B,kBAAA;AACpE,QAAM,EACJ,SACA,gBACA,uBACA,iBACA,qBACA,mBACA,iBACA,eACA,uBAAA,IACE,qBAAqB;IACvB;IACA;IACA;IACA;IACA,eAAe;IACf;EACD,CAAA;AAED,QAAM,uBAAsB,iDAAgB,WAAU;AACtD,QAAM,0BAAyB,uDAAmB,WAAU;AAC5D,QAAM,mBAAmB,sBAAsB;AAC/C,QAAM,+BAA+B,kBAAkB;AACvD,QAAM,+BAA+B,kBAAkB;AACvD,QAAM,YAAA,CAAa;AACnB,QAAM,mBAAmB,YAAY;AACrC,QAAM,YAAY,KAAK,SAAS,yBAAyB;AAEzD,QAAM,CAAC,kBAAkB,mBAAA,QAAuB,uBAC9C,OAA2C;IAAE,KAAK;IAAI,QAAQ,YAAY;IAAG,MAAM;EAAU,EAAA;AAM/F,QAAM,8BAA0B,qBAAO,iBAAA;AACvC,QAAM,mBAAe,qBAAuB,IAAA;AAK5C,QAAM,aAAa,SAAS;AAC5B,QAAM,mBAAmB,kBAAkB;AAC3C,QAAM,oBAAoB,mBAAmB;AAC7C,QAAM,eAAe,aAAa,mBAAmB;AACrD,QAAM,eAAe,gBAAgB,QAAQ,wBAAwB;AACrE,QAAM,EAAE,SAAS,SAAA,IAAa,gBAAgB,SAAA;AAC9C,QAAM,eAAe,mBAAmB,kBAAkB,KAAK,SAAS;AAExE,QAAM,4BAAwB,sBAC5B,OAAO;IACL,gBAAA;IACA,kBAAA;IACA;EACD,IACD;IAACmC;IAAgBuC;IAAkB;EAAW,CAAA;AAGhD,QAAM,2BAAuB,sBAAQ,MAAsC;AAEzE,QAAI,iBAAiB;AACrB,QAAI,mBAAmB;AAEvB,QAAI,gBAAgB,QAAQ,gBAAgB,QAAQ,aAAa,OAAO,EACtE,YAAWvD,SAAO,MAAM;AACtB,UAAI,aAAa,IAAI,aAAaA,KAAAA,CAAI,EACpC,kBAAiB;UAEjB,oBAAmB;AAGrB,UAAI,kBAAkB,iBAAkB;IACzC;AAGH,WAAO;MACL,eAAe,kBAAA,CAAmB;MAClC,iBAAiB,kBAAkB;IACpC;EACF,GAAE;IAAC;IAAM;IAAc;EAAa,CAAA;AAErC,QAAM,EACJ,qBACA,mBACA,gBACA,kBACA,WACA,cACA,WAAA,IACE,gBAAgB;IAClB;IACA;IACA;IACA;IACA;EACD,CAAA;AAED,QAAM,kBAAkB,mBAAmB;IACzC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD,CAAA;AAED,QAAM,EAAE,qBAAqB,mBAAA,IAAuB,gBAClD,SACA,iBACA,iBACA,SACA,WACA,qBACA,sBACA,wBACA,yBACA,cAAA;AAGF,QAAM,YAAY,aAAa,KAAK;AACpC,QAAM,YAAY,QAAQ,SAAS;AACnC,QAAM,sCAAsC,4BAA4B,gBAAA;AACxE,QAAM,qCAAqC,2BAA2B,gBAAA;AACtE,QAAM,eACJ,kBAAkB,iBAAiB,oBAAoB;AAKzD,QAAM,2BAA2B,cAAc,kBAAA;AAC/C,QAAM,0BAA0B,cAAc,gBAAA;AAC9C,QAAM,4BAA4B,cAAc,mBAAA;AAChD,QAAM,oBAAoB,cAAc,WAAA;AACxC,QAAM,0BAA0B,cAAc,iBAAA;AAC9C,QAAM,0BAA0B,cAAc,iBAAA;AAC9C,QAAM,wBAAwB,cAAc,eAAA;AAC5C,QAAM,kBAAkB,cAAc,SAAA;AACtC,QAAM,iCAAiC,cAAc,SAAA;AACrD,QAAM,mBAAmB,cAAc,UAAA;AACvC,QAAM,yBAAyB,cAAc,CAAC,EAAE,KAAK,OAAA,MAAuB;AAC1E,eAAW;MAAE,QAAQ,YAAY,SAAS;MAAG;IAAK,CAAA;EACnD,CAAA;AAKD,QAAM,2BAAuB,0BAAY,CAAC4V,WAAoB;AAC5D,kBAAc,MAAA;AACd,4BAAwB,UAAU;EACnC,GAAE,CAAE,CAAA;AAEL,QAAM,6BAAyB,0BAAY,MAAM;AAC/C,UAAMvV,SAAO,gBAAgB,QAAQ,OAAA;AACrC,QAAIA,WAAS,KAAM;AAEnB,mBAAeA,MAAAA;AAEf,UAAM,iBAAiB,OAAK,cAA0C,gBAAA,KAAqBA;AAC3F,mBAAe,MAAM,EAAE,eAAe,KAAM,CAAA;EAC7C,GAAE,CAAC,OAAQ,CAAA;AAKZ,oCAAgB,MAAM;AACpB,QACE,aAAa,YAAY,QACzB,uCACA,iBAAiB,QAAQ,IACzB;AACA,mBAAa,QAAQ,MAAM,EAAE,eAAe,KAAM,CAAA;AAClD,qBAAe,aAAa,OAAA;IAC7B;EACF,GAAE,CAAC,qCAAqC,gBAAiB,CAAA;AAE1D,oCAAgB,MAAM;AACpB,QAAI,iBAAiB;AACnB,yBAAmB,KAAA;AACnB,6BAAA;IACD;EACF,GAAE,CAAC,iBAAiB,sBAAuB,CAAA;AAE5C,wCAAoB,KAAK,OAAO;IAC9B,SAAS,QAAQ;IACjB,aAAa,EAAE,KAAK,OAAA,GAAU;AAC5B,YAAM,cACJ,QAAA,UAAqB,MAAM,yBAAyB,MAAM,QAAQ,SAAS,MAAA;AAC7E,YAAM,iBACJ,WAAA,UAAwB,6BAA6B,MAAA,IAAU,SAAA;AAEjE,UAAI,gBAAA,UAA6B,mBAAA,OAC/B,qBAAoB;QAAE,KAAK;QAAa,QAAQ;MAAgB,CAAA;IAEnE;IACD;EACD,EAAA;AAKD,WAAS,gBAAgBwV,MAA4B;AACnD,QAAA,CAAK,qBAAsB;AAE3B,2BAA6B,YAAA;AAE7B,UAAM,kBAAkB,IAAI,IAAI,YAAA;AAChC,eAAW7V,SAAO,MAAM;AACtB,WAAI,iEAAyBA,YAAS,KAAM;AAC5C,YAAM,SAAS,aAAaA,KAAAA;AAC5B,UAAI,KAAK,QACP,iBAAgB,IAAI,MAAA;UAEpB,iBAAgB,OAAO,MAAA;IAE1B;AACD,yBAAqB,eAAA;EACtB;AAED,WAAS,UAAU8V,MAAyB;AAC1C,QAAA,CAAK,qBAAsB;AAE3B,2BAA6B,YAAA;AAC7B,UAAM,EAAE,KAAA,OAAK,SAAS,aAAA,IAAiB;AACvC,SAAI,iEAAyB9V,YAAS,KAAM;AAC5C,UAAM,kBAAkB,IAAI,IAAI,YAAA;AAChC,UAAM,SAAS,aAAaA,KAAAA;AAC5B,UAAM,SAAS,KAAK,QAAQA,KAAAA;AAC5B,sBAAkB,MAAA;AAElB,QAAI,QACF,iBAAgB,IAAI,MAAA;QAEpB,iBAAgB,OAAO,MAAA;AAGzB,QACE,gBACA,mBAAmB,MACnB,mBAAmB,UACnB,iBAAiB,KAAK,QACtB;AACA,YAAM,OAAO,KAAK,SAAS,cAAA;AAC3B,eAAS,IAAI,iBAAiB,MAAM,MAAM,QAAQ,KAAK,MAAM;AAC3D,cAAMA,QAAM,KAAK,CAAA;AACjB,aAAI,iEAAyBA,YAAS,KAAM;AAC5C,YAAI,QACF,iBAAgB,IAAI,aAAaA,KAAAA,CAAI;YAErC,iBAAgB,OAAO,aAAaA,KAAAA,CAAI;MAE3C;IACF;AAED,yBAAqB,eAAA;EACtB;AAED,WAAS,cAAc+V,OAAsC;AAC3D,UAAM,EAAE,KAAK,QAAQ,KAAA,IAAS;AAC9B,QAAI,SAAS,OAAQ;AAErB,QAAI,iBAAiB,6BAA6B,MAAA,GAAS;AACzD,YAAM/V,QAAM,KAAK,MAAA;AACjB,YAAM,YAAY,gBAAgB,KAAA;AAClC,oBACE;QACE,MAAM;QACN,KAAA;QACA,QAAQ,QAAQ,GAAA;QAChB;QACA;MACD,GACD,SAAA;AAEF,UAAI,UAAU,uBAAA,EAA0B;IACzC;AAED,QAAA,EAAM,MAAM,kBAAkB,SAAU;AACxC,UAAM,cAAc,MAAM,OAAO,QAAQ,WAAA,MAAiB;AAC1D,UAAM,aAAa,cAAc,MAAM,WAAW,aAAa;AAC/D,QAAA,CAAK,eAAA,CAAgB,WAAY;AAEjC,YAAQ,MAAM,KAAd;MACE,KAAK;MACL,KAAK;MACL,KAAK;MACL,KAAK;MACL,KAAK;MACL,KAAK;MACL,KAAK;MACL,KAAK;MACL,KAAK;AACH,iBAAS,KAAA;AACT;MACF;AACE,wBAAgB,KAAA;AAChB;IACH;EACF;AAED,WAAS,aAAagW,OAAsC;AAC1D,UAAM,EAAE,WAAA,aAAW,YAAA,aAAA,IAAe,MAAM;AACxC,oCAAU,MAAM;AACd,mBAAaC,WAAAA;AAEb,oBAAc,IAAIC,YAAAA,CAAW;IAC9B,CAAA;AACD,yCAAW;EACZ;AAED,WAAS,UAAUrX,QAAiC4B,QAAgBR,OAAQ;AAC1E,QAAA,OAAW,iBAAiB,WAAY;AACxC,QAAID,UAAQ,KAAK,MAAA,EAAS;AAC1B,UAAM,cAAc,CAAC,GAAG,IAAK;AAC7B,gBAAY,MAAA,IAAUA;AACtB,iBAAa,aAAa;MACxB,SAAS,CAAC,MAAO;MACjB;IACD,CAAA;EACF;AAED,WAAS,sBAAsB;AAC7B,QAAI,iBAAiB,SAAS,OAAQ;AACtC,cAAU,QAAQ,iBAAiB,GAAA,GAAM,iBAAiB,QAAQ,iBAAiB,GAAA;EACpF;AAED,WAAS,eAAemW,OAA2B;AACjD,QAAA,CAAK,mCAAoC;AACzC,UAAM,EAAE,KAAK,OAAA,IAAW;AACxB,6CAAa;MAAE,KAAK,KAAK,MAAA;MAAS,QAAQ,QAAQ,GAAA;IAAM,GAAE;EAC3D;AAED,WAAS,gBAAgBA,OAA2B;AAClD,QAAA,CAAK,eAAA,CAAgB,gBAAA,CAAiB,eAAe,gBAAA,EACnD;AAGF,UAAM,EAAE,KAAK,OAAA,IAAW;AACxB,UAAM,SAAS,QAAQ,GAAA;AACvB,UAAM,aAAa,YAAY;MAAE,KAAK,KAAK,MAAA;MAAS;IAAQ,GAAE,KAAA;AAC9D,cAAU,QAAQ,QAAQ,UAAA;EAC3B;AAED,WAAS,gBAAgBJ,OAAsC;AAC7D,QAAA,CAAK,mCAAoC;AACzC,UAAM/V,QAAM,KAAK,iBAAiB,MAAA;AAClC,UAAM,EAAE,KAAK,SAAA,IAAa;AAG1B,QAAI,gBAAgB,YAAY,QAAQ,KAAK;AAC3C,6BAA6B,YAAA;AAC7B,YAAM,SAAS,aAAaA,KAAAA;AAC5B,gBAAU;QAAE,KAAA;QAAK,SAAA,CAAU,aAAa,IAAI,MAAA;QAAS,cAAc;MAAO,CAAA;AAE1E,YAAM,eAAA;AACN;IACD;AAED,QAAI,eAAe,gBAAA,KAAqB,mBAAmB,OAAO,eAAe,IAAA,EAC/E,qBAAoB,CAAC,EAAE,KAAK,OAAA,OAAc;MACxC;MACA;MACA,MAAM;MACN,KAAA;MACA,aAAaA;IACd,EAAA;EAEJ;AAKD,WAAS,8BAA8BoW,KAAa;AAClD,WAAO,OAAO,aAAa,OAAO;EACnC;AAED,WAAS,6BAA6B3V,QAAgB;AACpD,WAAO,UAAU,KAAK,SAAS,KAAK;EACrC;AAED,WAAS,4BAA4B,EAAE,KAAK,OAAA,GAA6B;AACvE,WAAO,UAAU,aAAa,UAAU,aAAa,8BAA8B,GAAA;EACpF;AAED,WAAS,uBAAuB,EAAE,KAAK,OAAA,GAA6B;AAClE,WAAO,6BAA6B,MAAA,KAAW,OAAO,KAAK,OAAO;EACnE;AAED,WAAS,2BAA2B,EAAE,KAAK,OAAA,GAA6B;AACtE,WAAO,6BAA6B,MAAA,KAAW,8BAA8B,GAAA;EAC9E;AAED,WAAS,eAAe4V,UAA6B;AACnD,WACE,uBAAuB,QAAA,KACvB,uBAAuB;MAAE;MAAS;MAAM,kBAAkB;IAAU,CAAA;EAEvE;AAED,WAAS,WAAWA,UAAoBC,cAAqC;AAC3E,QAAA,CAAK,4BAA4B,QAAA,EAAW;AAC5C,wBAAA;AAEA,UAAM,eAAe,eAAe,kBAAkB,QAAA;AAEtD,QAAI,gBAAgB,eAAe,QAAA,GAAW;AAC5C,YAAMtW,QAAM,KAAK,SAAS,MAAA;AAC1B,0BAAoB;QAAE,GAAG;QAAU,MAAM;QAAQ,KAAA;QAAK,aAAaA;MAAK,CAAA;IACzE,WAAU,aAET,gBAAe,gBAAgB,QAAQ,OAAA,CAAS;SAC3C;AACL,yBAAmB,IAAA;AACnB,0BAAoB;QAAE,GAAG;QAAU,MAAM;MAAU,CAAA;IACpD;AAED,QAAI,wBAAA,CAAyB,aAC3B,sBAAqB;MACnB,QAAQ,SAAS;MACjB,KAAK,6BAA6B,SAAS,MAAA,IAAU,KAAK,SAAS,MAAA,IAAA;MACnE,QAAQ,QAAQ,SAAS,GAAA;IAC1B,CAAA;EAEJ;AAED,WAAS,gBAAgB4F,KAAa2Q,SAAkBC,UAA6B;AACnF,UAAM,EAAE,KAAK,OAAA,IAAW;AACxB,UAAM,gBAAgB,uCAAuC,QAAQ;AAErE,YAAQ,KAAR;MACE,KAAK;AACH,eAAO;UAAE;UAAK,QAAQ,SAAS;QAAG;MACpC,KAAK;AACH,eAAO;UAAE;UAAK,QAAQ,SAAS;QAAG;MACpC,KAAK;AACH,eAAO;UAAE,KAAK,MAAM;UAAG;QAAQ;MACjC,KAAK;AACH,eAAO;UAAE,KAAK,MAAM;UAAG;QAAQ;MACjC,KAAK;AACH,eAAO;UAAE,KAAK,OAAO,WAAW,KAAK;UAAI;QAAQ;MACnD,KAAK;AAEH,YAAI,cAAe,QAAO;UAAE;UAAK,QAAQ;QAAW;AACpD,eAAO;UAAE,KAAK;UAAG,QAAQ,UAAU,YAAY;QAAQ;MACzD,KAAK;AAEH,YAAI,cAAe,QAAO;UAAE;UAAK,QAAQ;QAAW;AACpD,eAAO;UAAE,KAAK;UAAW,QAAQ,UAAU,YAAY;QAAQ;MACjE,KAAK,UAAU;AACb,YAAI,iBAAiB,WAAW,UAAW,QAAO;AAClD,cAAM,WAAW,UAAU,MAAA,IAAU,aAAa,MAAA,IAAU;AAC5D,eAAO;UAAE;UAAK,QAAQ,WAAW,IAAI,WAAW,QAAA,IAAY;QAAG;MAChE;MACD,KAAK,YAAY;AACf,YAAI,iBAAiB,UAAU,KAAK,OAAQ,QAAO;AACnD,cAAM,WAAW,UAAU,MAAA,IAAU;AACrC,eAAO;UAAE;UAAK,QAAQ,WAAW,iBAAiB,WAAW,QAAA,IAAY,KAAK,SAAS;QAAG;MAC3F;MACD;AACE,eAAO;IACV;EACF;AAED,WAAS,SAAST,OAAsC;AACtD,UAAM,EAAE,KAAK,SAAA,IAAa;AAC1B,QAAIU,qBAAyC;AAC7C,QAAI,QAAQ,OAAO;AACjB,UACE,YAAY;QACV;QACA;QACA;QACA;QACA;MACD,CAAA,GACD;AACA,4BAAA;AAEA;MACD;AAED,2BAAqB;IACtB;AAGD,UAAM,eAAA;AAEN,UAAM,UAAU,kBAAkB,KAAA;AAClC,UAAM,eAAe,gBAAgB,KAAK,SAAS,QAAA;AACnD,QAAI,eAAe,kBAAkB,YAAA,EAAe;AAEpD,UAAM,2BAA2B,4BAA4B;MAC3D,QAAQ,QAAQ;MAChB,UAAU,QAAQ,YAAa,QAAQ,SAAA,CAAU;MACjD;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,iBAAiB;MACjB;MACA,oBAAoB;IACrB,CAAA;AAED,eAAW,wBAAA;EACZ;AAED,WAAS,sBAAsBC,eAA2C;AACxE,QAAI,sBAAA,OAAiC;AACrC,UAAM,EAAE,OAAA,IAAW;AAEnB,UAAM,gBACJ,SAAS,oBACL,SAAS,iBAAiB,iBAAiB,oBAC3C,SAAS,iBAAiB,iBAAiB;AAEjD,WAAO,gBAAgB,iBAAiB,MAAA;EACzC;AAED,WAAS,mBAAmB;AAC1B,QACE,UAAU,QACV,iBAAiB,SAAS,UAAA,CACzB,2BAA2B,gBAAA,EAE5B;AAGF,UAAM,EAAE,KAAK,OAAA,IAAW;AACxB,UAAM,SAAS,QAAQ,GAAA;AACvB,QAAI,OAAO,kBAAkB,QAAQ,OAAO,aAAa,MACvD;AAGF,UAAM,cAAc,eAAe,MAAA;AAEnC,eACE,wBAAC,YAAA;MACC,cAAc,+BAA+B,SAAS;MAChD;MACE;MACK;MACF;MACX,WAAW,WAAW;MACJ;MACF;MACS;MACX;MACd,SAAS;MACD;MACK;MACS;;EAG3B;AAED,WAAS,cAAcjW,QAAgB;;AACrC,QAAI,iBAAiB,WAAW,UAAU,iBAAiB,SAAS,SAAU;AAE9E,UAAM,EAAE,KAAK,KAAA,MAAA,IAAQ;AACrB,UAAM,SAAS,QAAQ,GAAA;AACvB,UAAM,UAAU,WAAW,QAAQ,uBAAuB;MAAE,MAAM;MAAO,KAAA;IAAK,CAAA;AAC9E,UAAM,6BAA2B,YAAO,kBAAP,mBAAsB,6BAA4B;AAEnF,UAAM,cAAc,CAACkW,sBAA6B;AAChD,yBAAmBtJ,iBAAAA;AACnB,0BAAoB,CAAC,EAAE,KAAA,OAAK,QAAA,SAAA,OAAc;QAAE,KAAA;QAAK,QAAA;QAAQ,MAAM;MAAU,EAAA;IAC1E;AAED,UAAM,cAAc,CAACpN,OAAQ2W,eAAwBD,sBAA6B;AAChF,UAAI,cAKF,iCAAU,MAAM;AACd,kBAAU,QAAQ,iBAAiB,QAAQ3W,KAAAA;AAC3C,oBAAYqN,iBAAAA;MACb,CAAA;UAED,qBAAoB,CAAC,cAAc;QAAE,GAAG;QAAU,KAAA;MAAK,EAAA;IAE1D;AAED,QACE,4BACA,KAAK,iBAAiB,MAAA,MAAY,iBAAiB,YAGnD,aAAY,KAAA;AAGd,eACE,wBAAC,UAAA;MAES;MACC;MACT,KAAKrN;MACG;MACK;MACA;MACb,WAAW;MACD;OARL,OAAO,GAAA;EAWjB;AAED,WAAS,sBAAsBS,QAAgB;AAE7C,UAAM,iBAAiB,iBAAiB,QAAQ,KAAA,SAAiB,QAAQ,iBAAiB,GAAA;AAC1F,QACE,mBAAA,UACA,iBAAiB,WAAW,UAAA,CAC3B,gBAAgB,SAAS,cAAA,EAG1B,QAAO,iBAAiB,MAAM,oBAC1B,CAAC,GAAG,iBAAiB,cAAe,IACpC;MACE,GAAG,gBAAgB,MAAM,GAAG,wBAAwB,CAAA;MACpD;MACA,GAAG,gBAAgB,MAAM,wBAAwB,CAAA;IAClD;AAEP,WAAO;EACR;AAED,WAAS,kBAAkB;AACzB,UAAMoW,cAAiC,CAAE;AAEzC,UAAM,EAAE,KAAK,aAAa,QAAQ,eAAA,IAAmB;AAErD,UAAM,cACJ,sCAAsC,iBAAiB,sBACnD,sBAAsB,IACtB;AACN,UAAM,YACJ,sCAAsC,iBAAiB,oBACnD,oBAAoB,IACpB;AAEN,aAAS,iBAAiB,aAAa,kBAAkB,WAAW,kBAAkB;AACpF,YAAM,uBACJ,mBAAmB,sBAAsB,KAAK,mBAAmB,oBAAoB;AACvF,YAAM,SAAS,uBAAuB,iBAAiB;AAEvD,UAAI,aAAa;AACjB,YAAM,iBAAiB,gBAAgB,KAAA,SAAiB,QAAQ,WAAA;AAChE,UAAI,mBAAA,OACF,KAAI,qBAEF,cAAa,CAAC,cAAe;UAG7B,cAAa,sBAAsB,MAAA;AAIvC,YAAM7W,QAAM,KAAK,MAAA;AACjB,YAAM,eAAe,+BAA+B,SAAS;AAC7D,UAAI8W,MAAkB;AACtB,UAAI,gBAAgB;AACpB,UAAA,OAAW,iBAAiB,YAAY;AACtC,cAAM,aAAa9W,KAAAA;AACnB,yBAAgB,6CAAc,IAAI,SAAQ;MAC3C;AAED,kBAAY,KACV,UAAU,KAAK;QAEb,iBAAiB,+BAA+B,SAAS;QACzD,iBAAiB,eAAe,gBAAA;QAChC;QACA,KAAA;QACA,iBAAiB;QACjB,yBAAwB,iEAAyBA,WAAQ;QACzD;QACA,aAAa;QACb,mBAAmB;QACnB,mBAAmB;QACnB;QACA;QACA,iBAAiB,mBAAmB,SAAS,cAAA;QAC7C,oBAAoB,sBAAsB,MAAA;QAC1C,sBAAsB,aAAa,uBAAA;QACnC;QACA,aAAa;QACb,YAAY;QACZ,oBAAoB,cAAc,MAAA;MACnC,CAAA,CAAC;IAEL;AAED,WAAO;EACR;AAGD,MAAI,iBAAiB,MAAM,aAAa,iBAAiB,SAAS,WAAW;AAC3E,wBAAoB;MAAE,KAAK;MAAI,QAAQ,YAAY;MAAG,MAAM;IAAU,CAAA;AACtE,yBAAA,MAAA;EACD;AAED,MAAI,eAAA,UAAyB,eAAA,KAAoB,eAAA;AACjD,MAAI,sBAAsB,EACxB,iBAAA,WAA2B,mBAAA,KAAwB,gBAAA;AAErD,MAAI,KAAK,SAAS,EAChB,iBAAgB;AAElB,MAAI,yBAAyB,EAC3B,iBAAA,WAA2B,sBAAA,KAA2B,gBAAA;AAGxD,QAAM,oBACJ,iBAAiB,QAAQ,MAAM,iBAAiB,WAAW,YAAY;AAEzE,aAEE,yBAAC,OAAA;IACO;IACN,cAAY;IACZ,mBAAiB;IACjB,oBAAkB;IAClB,oBAAkB;IAClB,wBAAsB,eAAe,OAAA;IACrC,iBAAe,QAAQ;IACvB,iBAAe;IACf,WAAW,aACT,eACA,EAAA,CACG,yBAAA,GAA4B,WAC9B,GACD,SAAA;IAEF,OACE;MACE,GAAG;MAEH,0BACE,iBAAiB,MAAM,0BAAyB,qDAAkB,SAAA,SAAA,GAC3D,sBAAA,OAAuB;MAEhC,oBACE,6BAA6B,iBAAiB,MAAA,MAC9C,qDAAkB,YAAA,SAAA,GACX,mBAAmB,sBAAsB,gBAAA,MAC1C,yBAAyB,gBAAA,OAC1B;MAEP;MACA,kBAAkB;MAClB,2BAAA,GAA8B,eAAA;MAC9B,uBAAA,GAA0B,YAAA;MAC1B,GAAG;IACJ;IAEH,KAAK;IACL,KAAK;IACL,UAAU;IACV,WAAW;IACX,QAAQ;IACR,SAAS;IACT,eAAa;IACb,WAAS;;UAET,yBAAC,iCAAA;QAAgC,OAAO;uBACtC,wBAAC,iCAAA;UAAgC,OAAO;wBACtC,yBAAC,2BAAA;YAA0B,OAAO;uBAC/B,MAAM,KAAK,EAAE,QAAQ,6BAA8B,GAAE,CAAC,GAAG,cACxD,wBAAC+W,gCAAAA;cAEC,QAAQ,QAAQ;cAChB,OAAA,CAAQ,+BAA+B;cACvC,SAAS,sBAAsB,YAAY,KAAA;cAC3C,iBACE,iBAAiB,WAAW,YAAY,QAAQ,iBAAiB,MAAA;cAEnE,YAAY;eAPP,KAAA,CAQL,OAEJ,wBAACzD,mBAAAA;cACiB;cAChB,QAAQ;cACR,SAAS,sBAAsB,gBAAA;cAC/B,gBAAgB;cAChB,kBAAkB;cACL;cACb,qBAAqB;cACE;cACvB,iBACE,iBAAiB,WAAW,mBAAmB,iBAAiB,MAAA;cAElE,YAAY;cACZ,iBAAA,CAAkB;cACP;cACX;;YAGL,KAAK,WAAW,KAAK,iBACpB,qBAEA,yBAAA,6BAAA,EAAA,UAAA;UACG,iDAAgB,IAAI,CAACtT,OAAK,WAAW;AACpC,kBAAM,eAAe,kBAAkB,IAAI;AAC3C,kBAAM,gBAAgB,mBAAmB,IAAI;AAC7C,kBAAM,uBAAuB,iBAAiB,WAAW;AACzD,kBAAM,MAAM,mBAAmB,mBAAmB;AAElD,uBACE,wBAACmV,oBAAAA;cAEC,iBAAe;cACf,QAAQ;cACM;cACd,KAAKnV;cACA;cACL,QAAA;cACA,iBAAiB,sBAAsB,aAAA;cAChB;cACvB,iBAAiB,uBAAuB,iBAAiB,MAAA;cACzD,OAAA;cACA,YAAY;eAXP,MAAA;UAcV;cACD,wBAAC,2BAAA;YAA0B,OAAO;sBAC/B,gBAAA;;UAEF,uDAAmB,IAAI,CAACA,OAAK,WAAW;AACvC,kBAAM,eAAe,+BAA+B,KAAK,SAAS,SAAS;AAC3E,kBAAM,gBAAgB,KAAK,SAAS;AACpC,kBAAM,uBAAuB,iBAAiB,WAAW;AACzD,kBAAM,MACJ,eAAe,iBACX,aAAa,oBAAoB,kBAAkB,SAAS,UAAA;AAElE,kBAAM,SACJ,QAAA,SACI,oBAAoB,kBAAkB,SAAS,IAAI,UAAA;AAGzD,uBACE,wBAACmV,oBAAAA;cACC,iBAAe,eAAe,yBAAyB,SAAS;cAEhE,QAAQ;cACM;cACd,KAAKnV;cACA;cACG;cACR,iBAAiB,sBAAsB,aAAA;cAChB;cACvB,iBAAiB,uBAAuB,iBAAiB,MAAA;cACzD,OAAO;cACP,YAAY;eAVP,MAAA;UAaV;YACA;;MAIN,iBAAA;MAGA,qBAAqB,eAAA;MAGrB,kBACC,wBAAC,OAAA;QACC,KAAK;QACL,UAAU,oBAAoB,IAAI;QAClC,WAAW,aAAK,oBAAoB;WACjC,kCAAA,GAAA,CAAsC,6BACrC,iBAAiB,MAAA;WAElB,WAAA,GAAc;WACd,yBAAA,GAA4B,qBAAqB,0BAA0B;QAC7E,CAAA;QACD,OAAO,EACL,cAAc,iBAAiB,SAAS,+BAA+B,EACxE;;MAIJ,qBAAqB,YACpB,wBAAC,cAAA;QACmB;QAClB,yBAAyB;QAChB;;;;AAKlB;AAED,SAAS,gBAAgBgX,QAAwB;AAC/C,SAAO,OAAO,cAA8B,wCAAA;AAC7C;AAED,SAAS,eAAeC,IAAcC,IAAc;AAClD,SAAO,GAAG,QAAQ,GAAG,OAAO,GAAG,WAAW,GAAG;AAC9C;ACntCD,SAAS,UAAiB,EACxB,IACA,UACA,WACA,YACA,gBACA,QACA,KAAA,OACA,kBACA,iBACA,aAAa,mBAAA,GACW;;AACxB,QAAM,EAAE,UAAU,eAAe,QAAA,IAAY,kBAAkB,cAAA;AAE/D,WAAS,cAAc;AACrB,uBAAmB,EAAA;EACpB;AAGD,QAAM,kBAAkB,mBAAmB,qBAAqB,OAAO;AAEvE,aACE,wBAAC,OAAA;IACC,MAAK;IACL,iBAAe,OAAO,MAAM;IAC5B,iBAAe;IACL;IAEV,WAAW,iBAAiB,MAAA;IAC5B,OAAO;MACL,GAAG,aAAa,MAAA;MAChB,QAAQ,kBAAkB,YAAY;IACvC;IACD,SAAS,kBAAkB,cAAA;IAClB;gBAEN,mBAAmB,sBACpB,YAAO,oBAAP,gCAAyB;MACvB;MACA;MACA;MACA,KAAA;MACA;MACA,UAAU;MACV;IACD;KAlBE,OAAO,GAAA;AAqBjB;4BAEc,mBAAK,SAAA;ACzDpB,IAAMC,WAAQ;AAad,IAAMC,oBAAAA,iBAAqCD,QAAAA;AAQ3C,SAASE,WAAkB,EACzBrQ,WACAhH,KAAAA,OACA+G,QACAtH,iBACAgU,iBACA6D,eACAjQ,YACA6B,cACAqO,SACAnV,aACAoV,wBACA,GAAGrW,MAAAA,GAC4B;AAE/B,QAAMvB,MAAMH,gBAAgB,CAAA,EAAGE,QAAQ8X,oBAAoBzX,MAAI0X,QAAQ,IAAI1X,MAAI0X;AAE/E,WAASC,oBAAoB;AAC3BtQ,eAAW;MAAEN;MAAQnH,KAAK;IAAI,CAAA;EAChC;AAEA,QAAMgY,qBAAiBC,sBACrB,OAAiC;IAAEL,wBAAwB;IAAOF;EAAe,IACjF,CAACA,aACH,CAAA;AAEA,aACE;IAAC;;;;MAAoB,OAAOM;oBAC1B,wBAAC,OAAA;QACC,MAAK;QACL,cAAY5X,MAAI0X,QAAQ;QACxB,gBAAc1X,MAAI8X;QAClB,iBAAe9X,MAAI+X,WAAW;QAC9B,iBAAe/X,MAAIkC;QACnB,WAAW4J,aACTgH,cACAsE,mBAAAA,WACWrQ,SAAS,MAAM,IAAI,SAAS,KAAA,IACvC0M,oBAAoB,MAAMT,sBAC1BhM,SAAAA;QAEF,SAAS2Q;QACT,OAAOnC,YAAYtM,YAAAA;QACnB,GAAI/H;kBAEH1B,gBAAgBC,IAAKsD,CAAAA,eACpB,wBAAC,mBAAA;UAEC,IAAIhD,MAAIgY;UACR,UAAUhY,MAAIiC;UACd,WAAWjC,MAAIiY;UACf,YAAYjY,MAAIkC;UAChB,gBAAgBuR,oBAAoBzQ,OAAOpD;UACnCoD;UACR,KAAKhD;UACL,kBAAkBJ;UACLwC;UACb,iBAAiBmV,QAAQlG,SAASrO,OAAOrD,GAAAA;WAVpCqD,OAAOrD,GAAAA,CAYf;;;;AAIT;2BAEekJ,mBAAKwO,UAAAA;AC7Cb,SAAS,aAAmD,EACjE,SAAS,YACT,MAAM,SACN,WAAW,cACX,cAAc,iBACd,eAAe,kBACf,YAAY,eACZ,aAAa,gBACb,cACA,cAAc,iBACd,sBAAsB,yBACtB,WACA,SAAS,YACT,YACA,kBACA,0BACA,eAAe,kBACf,GAAG,MAAA,GAC2B;;AAC9B,QAAM,mBAAmB,oBAAA;AACzB,QAAM,gBAAe,uCAAW,eAAa,qDAAkB,cAAa;AAC5E,QAAM,+BAA+B,OAAK,WAAM,mBAAN,mBAAsB,WAAU;AAC1E,QAAM,EAAE,SAAS,SAAA,IAAa,gBAAgB,MAAM,SAAA;AACpD,QAAM,oBAAoB,cAAc,WAAA;AACxC,QAAM,gBAAgB,oBAAoB;AAE1C,QAAM,EAAE,SAAS,QAAA,QAAY,sBAAQ,MAAM;AACzC,UAAM7D,YAAU,CAAC,GAAG,UAAW,EAAC,KAAK,CAAC,EAAE,KAAK,KAAA,GAAQ,EAAE,KAAK,KAAA,MAAW;AAErE,UAAI,SAAS,kBAAmB,QAAO;AACvC,UAAI,SAAS,kBAAmB,QAAO;AAGvC,UAAI,WAAW,SAAS,IAAA,GAAO;AAC7B,YAAI,WAAW,SAAS,IAAA,EACtB,QAAO,WAAW,QAAQ,IAAA,IAAQ,WAAW,QAAQ,IAAA;AAEvD,eAAO;MACR;AACD,UAAI,WAAW,SAAS,IAAA,EAAO,QAAO;AAGtC,aAAO;IACR,CAAA;AAED,UAAM0E,YAAoB,CAAE;AAC5B,eAAW,CAAC,OAAO,MAAA,KAAW,UAAQ,QAAA,EACpC,KAAI,WAAW,SAAS,OAAO,GAAA,GAAM;AACnC,gBAAQ,KAAK,OAAO,GAAA;AACpB,gBAAQ,KAAA,IAAS;QACf,GAAG;QACH,QAAQ;QACR,YAAY,MAAM;QAClB,iBAAiB,OAAO,mBAAmB;QAC3C,UAAU;MACX;IACF;AAGH,WAAO;MAAE,SAAA;MAAS,SAAA;IAAS;EAC5B,GAAE,CAAC,YAAY,UAAW,CAAA;AAE3B,QAAM,CAAC,aAAa,SAAA,QAAa,sBAAQ,MAAM;AAC7C,QAAI,QAAQ,WAAW,EAAG,QAAO,CAAA,QAAY,QAAQ,MAAO;AAE5D,UAAM,YAAY,CAChBC,QACA,CAAC,YAAe,uBAAA,GAChBC,kBAC6C;AAC7C,UAAI,iBAAiB;AACrB,YAAMC,SAA+B,CAAE;AACvC,iBAAW,CAAC,KAAK,SAAA,KAAc,OAAO,QAAQ,WAAWlP,QAAM,UAAA,CAAW,GAAG;AAE3E,cAAM,CAAC,aAAa,cAAA,IAClB,qBAAqB,WAAW,IAC5B,CAAC,WAAW,UAAU,MAAO,IAC7B,UAAU,WAAW,sBAAsB,gBAAgB,iBAAiB,CAAA;AAClF,eAAO,GAAA,IAAO;UAAE;UAAW;UAAa,eAAe,gBAAgB;QAAgB;AACvF,0BAAkB,iBAAiB;MACpC;AAED,aAAO,CAAC,QAAQ,cAAe;IAChC;AAED,WAAO,UAAU,SAAS,SAAS,CAAA;EACpC,GAAE;IAAC;IAAS;IAAY;EAAQ,CAAA;AAEjC,QAAM,CAAC,MAAM,UAAA,QAAc,sBAAQ,MAG9B;AACH,UAAM,eAAe,oBAAI,IAAA;AACzB,QAAA,CAAK,YAAa,QAAO,CAAC,SAASmP,YAAW;AAE9C,UAAMC,gBAAwC,CAAE;AAEhD,UAAM,cAAc,CAClBC,QACAC,UACA3U,UACS;AACT,UAAI,gBAAgBqF,MAAAA,GAAO;AACzB,sBAAc,KAAK,GAAGA,MAAAA;AACtB;MACD;AACD,aAAO,KAAKA,MAAAA,EAAM,QAAQ,CAAC,UAAU,UAAU,SAAS;AACtD,cAAM,KAAK,cAAc,UAAU,QAAA;AACnC,cAAM,aAAa,iBAAiB,IAAI,EAAA;AACxC,cAAM,EAAE,WAAW,aAAa,cAAA,IAAkBA,OAAK,QAAA;AAEvD,cAAMuP,aAAwB;UAC5B;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,SAAS,KAAK;QACf;AACD,sBAAc,KAAKvB,UAAAA;AACnB,qBAAa,IAAIA,UAAAA;AAEjB,YAAI,WACF,aAAY,aAAa,IAAI,QAAQ,CAAA;MAExC,CAAA;IACF;AAED,gBAAY,aAAA,QAAwB,CAAA;AACpC,WAAO,CAAC,eAAemB,YAAW;AAElC,aAASA,aAAWK,OAA0C;AAC5D,aAAO,aAAa,IAAI3Y,KAAAA;IACzB;EACF,GAAE;IAAC;IAAkB;IAAa;IAAS;EAAc,CAAA;AAE1D,QAAM,gBAAY,sBAAQ,MAAM;AAC9B,QAAA,OAAW,iBAAiB,WAC1B,QAAO,CAAC2Y,UAAiC;AACvC,UAAI,WAAW3Y,KAAAA,EACb,QAAO,aAAa;QAAE,MAAM;QAAS,KAAA;MAAK,CAAA;AAE5C,aAAO,aAAa;QAAE,MAAM;QAAO,KAAA;MAAK,CAAA;IACzC;AAGH,WAAO;EACR,GAAE,CAAC,YAAY,YAAa,CAAA;AAE7B,QAAM,2BAAuB,0BAC3B,CAAC2Y,UAAyB;AACxB,UAAM,SAAS,KAAK,QAAQ3Y,KAAAA;AAC5B,aAAS,IAAI,SAAS,GAAG,KAAK,GAAG,KAAK;AACpC,YAAM,YAAY,KAAK,CAAA;AACvB,UAAI,WAAW,SAAA,MAAU,CAAM,WAAWA,KAAAA,KAAQA,MAAI,aAAa,UAAU,IAC3E,QAAO,CAAC,WAAW,CAAE;IAExB;AAED,WAAA;EACD,GACD,CAAC,YAAY,IAAK,CAAA;AAGpB,QAAM,mBAAe,0BACnB,CAAC2Y,UAAyB;AACxB,QAAI,WAAW3Y,KAAAA,EACb,QAAOA,MAAI;AAGb,QAAA,OAAW,oBAAoB,WAC7B,QAAO,gBAAgBA,KAAAA;AAGzB,UAAM,oBAAoB,qBAAqBA,KAAAA;AAC/C,QAAI,sBAAA,QAAiC;AACnC,YAAM,EAAE,eAAe,UAAA,IAAc,kBAAkB,CAAA;AACvD,YAAM,aAAa,UAAU,QAAQA,KAAAA;AACrC,aAAO,gBAAgB,aAAa;IACrC;AAED,WAAO,KAAK,QAAQA,KAAAA;EACrB,GACD;IAAC;IAAsB;IAAY;IAAiB;EAAK,CAAA;AAG3D,QAAM,mBAAe,sBAAQ,MAA+B;AAC1D,QAAI,mBAAmB,KAAM,QAAO;AAEpC,2BAA6B,eAAA;AAE7B,UAAM4Y,iBAAe,IAAI,IAAS,eAAA;AAClC,eAAW5Y,SAAO,KAChB,KAAI,WAAWA,KAAAA,GAAM;AAEnB,YAAM,qBAAqB,MAAI,UAAU,MAAM,CAAC,OAC9C,gBAAgB,IAAI,gBAAgB,EAAA,CAAG,CAAC;AAE1C,UAAI,mBACF,gBAAa,IAAIA,MAAI,EAAA;IAExB;AAGH,WAAO4Y;EACR,GAAE;IAAC;IAAY;IAAiB;IAAiB;EAAK,CAAA;AAEvD,WAAS,qBAAqBC,iBAA2B;AACvD,QAAA,CAAK,wBAAyB;AAE9B,2BAA6B,eAAA;AAE7B,UAAM,qBAAqB,IAAI,IAAI,eAAA;AACnC,eAAW7Y,SAAO,MAAM;AACtB,YAAM,MAAM,aAAaA,KAAAA;AACzB,WAAI,6CAAc,IAAI,SAAI,CAAK,gBAAgB,IAAI,GAAA,EACjD,KAAI,WAAWA,KAAAA,EAEb,YAAW,MAAMA,MAAI,UACnB,oBAAmB,OAAO,gBAAgB,EAAA,CAAG;UAG/C,oBAAmB,OAAO,GAAA;iBAElB,6CAAc,IAAI,SAAQ,gBAAgB,IAAI,GAAA,EACxD,KAAI,WAAWA,KAAAA,EAEb,YAAW,MAAMA,MAAI,UACnB,oBAAmB,IAAI,gBAAgB,EAAA,CAAG;UAG5C,oBAAmB,IAAI,GAAA;IAG5B;AAED,4BAAwB,kBAAA;EACzB;AAED,WAAS,cAAc8Y,MAA8BC,OAA0B;AAC7E,yDAAmB,MAAM;AACzB,QAAI,MAAM,uBAAA,EAA0B;AAEpC,QAAI,KAAK,SAAS,OAAQ;AAC1B,UAAM,EAAE,QAAQ,QAAQ,WAAA,IAAe;AAEvC,UAAM,OAAM,iCAAQ,QAAO;AAC3B,UAAM/Y,QAAM,KAAK,MAAA;AAEjB,QAAA,CAAK,WAAWA,KAAAA,EAAM;AACtB,QACE,QAAQ,OAEN,MAAM,QAAQ,WAAWA,MAAI,cAE5B,MAAM,QAAQ,YAAA,CAAaA,MAAI,aAClC;AAEA,YAAM,eAAA;AACN,YAAM,mBAAA;AACN,kBAAYA,MAAI,EAAA;IACjB;AAGD,QAAI,QAAQ,MAAM,MAAM,QAAQ,WAAA,CAAYA,MAAI,cAAcA,MAAI,UAAU,GAAG;AAC7E,YAAM,oBAAoB,qBAAqBA,KAAAA;AAC/C,UAAI,sBAAA,QAAiC;AACnC,cAAM,mBAAA;AACN,mBAAW;UAAE;UAAK,QAAQ,kBAAkB,CAAA;QAAI,CAAA;MACjD;IACF;EACF;AAGD,WAAS,eACP,EAAE,KAAA,OAAK,OAAA,GACPmW,OACA;AACA,QAAA,CAAK,WAAWnW,KAAAA,EACd,gDAAgB;MAAE,KAAA;MAAK;IAAQ,GAAE;EAEpC;AAED,WAAS,gBACP,EAAE,KAAA,OAAK,OAAA,GACPmW,OACA;AACA,WAAO,WAAWnW,KAAAA,IAAOA,QAAM,eAAgB;MAAE,KAAA;MAAK;IAAQ,GAAE,KAAA;EACjE;AAED,WAAS,iBAAiBgZ,aAAkB,EAAE,SAAS,OAAA,GAAiC;AACtF,QAAA,CAAK,aAAc;AACnB,UAAM,iBAAiB,CAAC,GAAG,OAAQ;AACnC,UAAMC,aAAuB,CAAE;AAC/B,eAAW,SAAS,SAAS;AAC3B,YAAM,WAAW,QAAQ,QAAQ,KAAK,KAAA,CAAA;AACtC,qBAAe,QAAA,IAAY,YAAY,KAAA;AACvC,iBAAW,KAAK,QAAA;IACjB;AACD,iBAAa,gBAAgB;MAC3B,SAAS;MACT;IACD,CAAA;EACF;AAED,WAAS,YAAYC,SAAkB;AACrC,UAAM,sBAAsB,IAAI,IAAI,gBAAA;AACpC,QAAI,oBAAoB,IAAI,OAAA,EAC1B,qBAAoB,OAAO,OAAA;QAE3B,qBAAoB,IAAI,OAAA;AAE1B,6BAAyB,mBAAA;EAC1B;AAED,WAAS,UACPC,KACA,EACE,KAAA,OACA,UACA,aACA,mBACA,mBACA,aACA,uBACA,oBACA,sBACA,oBACA,GAAG,SAAA,GAEL;AACA,QAAI,WAAWnZ,KAAAA,GAAM;AACnB,YAAM,EAAE,cAAA,IAAkBA;AAC1B,iBACE;QAACqX;;;;;UAEC,GAAI;UACJ,iBAAe,+BAA+B,gBAAgB;UAC9D,KAAKrX;UACI;UACT,aAAa;;QALR;;IAQV;AAED,QAAI,eAAe,SAAS,eAAA;AAC5B,UAAM,oBAAoB,qBAAqBA,KAAAA;AAC/C,QAAI,sBAAA,QAAiC;AACnC,YAAM,EAAE,eAAe,UAAA,IAAc,kBAAkB,CAAA;AACvD,YAAM,aAAa,UAAU,QAAQA,KAAAA;AACrC,qBAAe,gBAAgB,+BAA+B,aAAa;IAC5E;AAED,WAAO,aAAa,KAAK;MACvB,GAAG;MACH,iBAAiB;MACjB,KAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACD,CAAA;EACF;AAED,aACE,wBAAC,UAAA;IACC,GAAI;IACJ,MAAK;IACL,iBACE,YAAY,OAAK,WAAM,mBAAN,mBAAsB,WAAU,QAAM,WAAM,sBAAN,mBAAyB,WAAU;IAEnF;IACH;IACK;IACG;IACd,cAAc;IACA;IACQ;IACtB,eAAe;IACf,YAAY;IACZ,aAAa,iBAAiB,kBAAA;IAC9B,WAAW;MACT,GAAG;MACH;IACD;;AAGN;AAED,SAAS,qBAAqBoZ,UAAkBX,UAA8B;AAC5E,SAAO,aAAA,SAAA,GAA4B,QAAA,KAAa,QAAA,KAAa;AAC9D;AAED,SAAS,gBAAgBY,KAAyC;AAChE,SAAO,MAAM,QAAQ,GAAA;AACtB;ACpcD,IAAMC,8BAA2B;IA6BpBC,sBAAAA,mBAAyCD,2BAAAA;AAEtD,SAASE,mBAAmBC,OAAgC;AAC1DA,iCAAOC;AACPD,iCAAOE;AACT;AAEe,SAASC,WAA8B,EACpD5Z,KAAAA,OACAgD,QACAoE,aACAuF,QAAAA,GACyC;AACzC,aACE,wBAAC,SAAA;IACC,WAAW4M;IACX,KAAKC;IACL,OAAOxZ,MAAIgD,OAAOrD,GAAAA;IAClB,UAAWsI,CAAAA,UAAUb,YAAY;MAAE,GAAGpH;OAAMgD,OAAOrD,GAAAA,GAAMsI,MAAM3G,OAAOuY;IAAO,CAAA;IAC7E,QAAQ,MAAMlN,QAAQ,MAAM,KAAA;;AAGlC;",
  "names": ["column: CalculatedColumn<R, SR>", "lastFrozenColumnIndex: number", "args: ColSpanArgs<R, SR>", "event: React.SyntheticEvent", "element: Maybe<Element>", "event: E", "e: React.KeyboardEvent", "event: React.KeyboardEvent<HTMLDivElement>", "isUserHandlingPaste: boolean", "direction: Maybe<Direction>", "measuringCellClassname", "renderMeasuringCells", "viewportColumns", "map", "key", "idx", "minWidth", "maxWidth", "gridColumnStart", "row", "row: R", "moveNext: boolean", "moveNext", "parent: CalculatedColumnParent<R, SR>", "cell", "cellClassname", "cellFrozen", "cellFrozenClassname", "rowIdx: number", "column: CalculatedColumnOrColumnGroup<R, SR>", "rowSpan: number", "keyGetter: Maybe<(row: NoInfer<R>) => K>", "width: number", "checkbox", "checkboxClassname", "renderCheckbox", "onChange", "indeterminate", "props", "handleChange", "e", "target", "checked", "nativeEvent", "shiftKey", "el", "groupCellContent", "groupCellContentClassname", "caret", "caretClassname", "renderToggleGroup", "ToggleGroup", "groupKey", "isExpanded", "tabIndex", "toggleGroup", "handleKeyDown", "d", "props: RenderCellProps<R, SR>", "props: RenderHeaderCellProps<unknown>", "props: RenderCellProps<unknown>", "props: RenderGroupCellProps<unknown>", "SelectColumn: Column<any, any>", "headerSortCellClassname", "headerSortName", "headerSortNameClassname", "renderHeaderCell", "column", "sortDirection", "priority", "sortable", "name", "SortableHeaderCell", "children", "renderSortStatus", "useDefaultRenderers", "defaultRenderCell", "lastFrozenColumnIndex", "headerRowsCount", "columns: MutableCalculatedColumn<R, SR>[]", "rawColumns: readonly ColumnOrColumnGroup<R, SR>[]", "level: number", "parent?: MutableCalculatedColumnParent<R, SR>", "rawColumns", "calculatedColumnParent: MutableCalculatedColumnParent<R, SR>", "column: MutableCalculatedColumn<R, SR>", "colSpanColumns: CalculatedColumn<R, SR>[]", "columnMetrics", "totalFrozenColumnWidth", "templateColumns: string[]", "layoutCssVars: Record<string, string>", "colOverscanStartIdx", "colOverscanEndIdx", "column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>", "index: number", "columns: readonly CalculatedColumn<R, SR>[]", "viewportColumns: readonly CalculatedColumn<R, SR>[]", "templateColumns: readonly string[]", "gridRef: React.RefObject<HTMLDivElement | null>", "gridWidth: number", "resizedColumnWidths: ReadonlyMap<string, number>", "measuredColumnWidths: ReadonlyMap<string, number>", "setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>", "setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>", "onColumnResize: DataGridProps<R, SR>['onColumnResize']", "columnsCanFlex: boolean", "ignorePreviouslyMeasuredColumns: boolean", "columnsToMeasure: string[]", "measuredColumnWidths", "resizedColumnWidths", "nextWidth: ResizedWidth", "key: string", "offsetHeight", "clientHeight", "fn: T", "isSelected: boolean", "event: React.FocusEvent<HTMLDivElement>", "startIdx", "colIdx: number", "colSpan: number | undefined", "viewportColumns: CalculatedColumn<R, SR>[]", "offset: number", "totalRowHeight", "gridTemplateRows", "cellDraggedOver", "cellDraggedOverClassname", "Cell", "colSpan", "isCellSelected", "isDraggedOver", "rowIdx", "className", "onClick", "onDoubleClick", "onContextMenu", "onRowChange", "selectCell", "style", "childTabIndex", "onFocus", "useRovingTabIndex", "cellClass", "getCellClassname", "isEditable", "isCellEditableUtil", "selectCellWrapper", "openEditor", "handleClick", "event", "cellEvent", "createCellEvent", "isGridDefaultPrevented", "handleContextMenu", "handleDoubleClick", "handleRowChange", "newRow", "getCellStyle", "renderCell", "isCellEditable", "CellComponent", "memo", "cellDragHandle", "cellDragHandleFrozenClassname", "cellDragHandleClassname", "DragHandle", "gridRowStart", "rows", "columnWidth", "maxColIdx", "isLastRow", "selectedPosition", "latestDraggedOverRowIdx", "onRowsChange", "onFill", "setDragging", "setDraggedOverRowIdx", "handleMouseDown", "preventDefault", "buttons", "window", "addEventListener", "onMouseOver", "onMouseUp", "removeEventListener", "handleDragEnd", "overRowIdx", "current", "startRowIndex", "endRowIndex", "updateRows", "stopPropagation", "length", "startRowIdx", "endRowIdx", "sourceRow", "updatedRows", "indexes", "i", "updatedRow", "columnKey", "targetRow", "push", "getStyle", "type", "insetInlineStart", "marginEnd", "isLastColumn", "marginInlineEnd", "marginBlockEnd", "clsx", "frozen", "cellEditing", "EditCell", "closeEditor", "onKeyDown", "navigate", "frameRequestRef", "useRef", "commitOnOutsideClick", "editorOptions", "commitOnOutsideMouseDown", "useLatestFunc", "onClose", "useEffect", "onWindowCaptureMouseDown", "requestAnimationFrame", "capture", "cancelFrameRequest", "cancelAnimationFrame", "mode", "onEditorNavigation", "commitChanges", "shouldFocusCell", "onEditorRowChange", "commitChangesAndFocus", "displayCellContent", "renderEditCell", "cellSortableClassname", "cellResizable", "cellResizableClassname", "resizeHandleClassname", "cellDraggableClassname", "cellDragging", "cellDraggingClassname", "cellOver", "cellOverClassname", "HeaderCell", "onColumnResize", "onColumnsReorder", "sortColumns", "onSortColumnsChange", "shouldFocusGrid", "direction", "dragDropKey", "isDragging", "setIsDragging", "useState", "isOver", "setIsOver", "rowSpan", "getHeaderCellRowSpan", "sortIndex", "findIndex", "sort", "sortColumn", "ariaSort", "resizable", "draggable", "headerCellClass", "onSort", "ctrlClick", "sortDescendingFirst", "nextSort", "nextSortColumn", "nextSortColumns", "splice", "ctrlKey", "metaKey", "handleFocus", "isCtrlKeyHeldDown", "width", "currentTarget", "getBoundingClientRect", "leftKey", "getLeftRightKey", "offset", "newWidth", "clampColumnWidth", "onDragStart", "dataTransfer", "setData", "dropEffect", "onDragEnd", "onDragOver", "onDrop", "types", "includes", "toLowerCase", "sourceKey", "getData", "onDragEnter", "isEventPertinent", "onDragLeave", "draggableProps", "getHeaderCellStyle", "ResizeHandle", "resizingOffsetRef", "isRtl", "onPointerDown", "pointerType", "pointerId", "setPointerCapture", "headerCell", "parentElement", "right", "left", "clientX", "onPointerMove", "onLostPointerCapture", "relatedTarget", "contains", "rowClassname", "rowSelected", "rowSelectedClassname", "rowSelectedWithFrozenCell", "topSummaryRowClassname", "bottomSummaryRowClassname", "headerRow", "headerRowClassname", "HeaderRow", "headerRowClass", "columns", "selectedCellIdx", "useId", "cells", "index", "getColSpan", "newRow: R", "event: React.MouseEvent<HTMLDivElement>", "key: React.Key", "props: RenderRowProps<R, SR>", "arrow", "arrowClassname", "renderSortIcon", "renderSortPriority", "root", "rootClassname", "viewportDragging", "viewportDraggingClassname", "focusSinkClassname", "focusSinkHeaderAndSummaryClassname", "summaryCellClassname", "SummaryCell", "summaryCellClass", "renderSummaryCell", "summaryRow", "topSummaryRow", "summaryRowClassname", "SummaryRow", "top", "bottom", "isTop", "ariaRowIndex", "getRowStyle", "props: DataGridProps<R, SR, K>", "defaultRenderSortStatus", "defaultRenderCheckbox", "rowIdx?: number", "args: SelectHeaderRowEvent", "args: SelectRowEvent<R>", "event: KeyboardEvent<HTMLDivElement>", "event: React.UIEvent<HTMLDivElement>", "scrollTop", "scrollLeft", "event: CellClipboardEvent", "idx: number", "position: Position", "enableEditor?: Maybe<boolean>", "ctrlKey: boolean", "shiftKey: boolean", "cellNavigationMode: CellNavigationMode", "currentRowIdx: number", "shouldFocusCell: boolean", "commitChanges: boolean", "rowElements: React.ReactNode[]", "key: K | number", "GroupedColumnHeaderRow", "gridEl: HTMLDivElement", "p1: Position", "p2: Position", "groupRow", "groupRowClassname", "GroupedRow", "isRowSelected", "groupBy", "isRowSelectionDisabled", "SELECT_COLUMN_KEY", "level", "handleSelectGroup", "selectionValue", "useMemo", "setSize", "posInSet", "id", "childRows", "groupBy: string[]", "rows: readonly R[]", "startRowIndex: number", "groups: GroupByDictionary<R>", "isGroupRow", "flattenedRows: Array<R | GroupRow<R>>", "rows: GroupByDictionary<R> | readonly R[]", "parentId: string | undefined", "groupRow: GroupRow<R>", "row: R | GroupRow<R>", "selectedRows", "newSelectedRows: Set<Key>", "args: CellKeyDownArgs<R, SR>", "event: CellKeyboardEvent", "updatedRows: R[]", "rawIndexes: number[]", "groupId: unknown", "key: Key", "groupKey: string", "arr: unknown", "textEditorInternalClassname", "textEditorClassname", "autoFocusAndSelect", "input", "focus", "select", "textEditor", "value"]
}
